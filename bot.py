import os
import logging
import re
from typing import Dict, Optional, Set, Any, List, Tuple
import asyncio
import json
from openai import AsyncOpenAI
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReactionTypeEmoji
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from telegram.error import TelegramError
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        RotatingFileHandler("bot.log", maxBytes=5 * 1024 * 1024, backupCount=3, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CONFIG = {
    "ADMIN_IDS": [7611426172],  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
    "DELAY_SECONDS_MAIN_SERVICE": 9420,  # 2 —á–∞—Å–∞ 37 –º–∏–Ω—É—Ç (7200 + 2220 —Å–µ–∫—É–Ω–¥)
    "DELAY_SECONDS_REVIEW_REQUEST": 43200,  # 12 —á–∞—Å–æ–≤
    "MAX_MESSAGE_LENGTH": 3900,
    "OPENAI_MAX_TOKENS_TAROT": 4000,
    "OPENAI_MAX_TOKENS_MATRIX": 6000,
    "OPENAI_MAX_CONCURRENT": 3,
    "RETRY_DELAY": 7,
    "MAX_RETRIES": 2,
    "COMPLETED_USERS_FILE": "completed_users.json",
    "MIN_TEXT_LENGTH_TAROT_BACKSTORY": 100,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏: 100 —Å–∏–º–≤–æ–ª–æ–≤
    "MIN_TEXT_LENGTH_TAROT_QUESTION": 100,   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: 100 —Å–∏–º–≤–æ–ª–æ–≤
}

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API ---
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN or not OPENAI_API_KEY:
    logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY")
    raise ValueError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_TOKEN –∏ OPENAI_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (completed_users) ---
completed_users: Set[int] = set()

def load_completed_users() -> Set[int]:
    try:
        if os.path.exists(CONFIG["COMPLETED_USERS_FILE"]):
            with open(CONFIG["COMPLETED_USERS_FILE"], 'r', encoding='utf-8') as f:
                user_ids = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {CONFIG['COMPLETED_USERS_FILE']}")
                return set(user_ids)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {CONFIG['COMPLETED_USERS_FILE']}: {e}")
    return set()

def save_completed_users(users_set: Set[int]):
    try:
        with open(CONFIG["COMPLETED_USERS_FILE"], 'w', encoding='utf-8') as f:
            json.dump(list(users_set), f, indent=4)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(users_set)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ {CONFIG['COMPLETED_USERS_FILE']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {CONFIG['COMPLETED_USERS_FILE']}: {e}")

completed_users = load_completed_users()

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
WELCOME_TEXT = """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ó–∞–º–∏—Ä–∞.
–Ø –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π —Ç–∞—Ä–æ–ª–æ–≥ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ –°—É–¥—å–±—ã —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 15 –ª–µ—Ç. –†–∞–¥–∞, –µ—Å–ª–∏ —Å–º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–æ—è—Å–Ω–∏—Ç—å –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è.

–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –≠—Ç–æ —Ö–æ—Ä–æ—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∞–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π –∏ –º–æ–∏–º –ø–æ–¥—Ö–æ–¥–æ–º –∫ —Ä–∞–±–æ—Ç–µ.

–ù–∞ –≤–∞—à –≤—ã–±–æ—Ä:
üÉè –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ ‚Äì –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é, –ø–æ–∏—â–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ª–Ω—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
üåü –†–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã ‚Äì –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏, —Ç–∞–ª–∞–Ω—Ç—ã –∏ –∑–∞–¥–∞—á–∏.

–í –∫–∞—á–µ—Å—Ç–≤–µ —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω–∞ –∑–∞ –º–æ—é —Ä–∞–±–æ—Ç—É –∏ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ–∫–∞–∂–µ—Ç—Å—è –¥–ª—è –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ–π, —è –±—É–¥—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –∑–∞ –≤–∞—à —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –ê–≤–∏—Ç–æ.

–ö–∞–∫ –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
1.  –í—ã —É–∂–µ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ /start. –û—Ç–ª–∏—á–Ω–æ!
2.  –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ, –∫–∞–∫–∞—è —É—Å–ª—É–≥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –¢–∞—Ä–æ –∏–ª–∏ –ú–∞—Ç—Ä–∏—Ü–∞.
3.  –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äì —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.
4.  –°–∞–º –æ—Ç–≤–µ—Ç —è –≥–æ—Ç–æ–≤–ª—é –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤, —Ç–∞–∫ –∫–∞–∫ —Å –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —Ä–∞–±–æ—Ç–∞—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.

–ì–æ—Ç–æ–≤—ã? –¢–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ üëá"""

TAROT_INTRO_TEXT = """–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¢–∞—Ä–æ. üÉè
–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è —Å–º–æ–≥–ª–∞ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏, –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ë—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ."""

MATRIX_INTRO_TEXT = """–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä. –†–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã ‚Äì —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞. üåü
–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –≤–∞—à–∏ –ø–æ–ª–Ω—ã–µ –∏–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –Ø –∑–∞–¥–∞–º —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –≤–∞–º —Å–µ–π—á–∞—Å."""

ASK_MATRIX_NAME_TEXT = """(–®–∞–≥ 1 –∏–∑ 2) –ò—Ç–∞–∫, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞—Å—á–µ—Ç—É –≤–∞—à–µ–π –ú–∞—Ç—Ä–∏—Ü—ã.
–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è. –ï—Å–ª–∏ –¥–µ–ª–∞–µ—Ç–µ —Ä–∞–∑–±–æ—Ä –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚Äì —Ç–æ–≥–¥–∞ –µ–≥–æ –∏–º—è."""

ASK_MATRIX_DOB_TEXT = """(–®–∞–≥ 2 –∏–∑ 2) –ë–ª–∞–≥–æ–¥–∞—Ä—é. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.07.1988)."""

CONFIRM_DETAILS_MATRIX_TEXT = """–ë–ª–∞–≥–æ–¥–∞—Ä—é. –¢–µ–ø–µ—Ä—å –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –¥–∞–≤–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã.

–ò–º—è: {name}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob}

–í—Å—ë –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ? –ï—Å–ª–∏ –¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª."""

ASK_TAROT_MAIN_PERSON_NAME_TEXT = """(–®–∞–≥ 1 –∏–∑ 5) –ò—Ç–∞–∫, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ.
–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à–µ –∏–º—è."""

ASK_TAROT_MAIN_PERSON_DOB_TEXT = """(–®–∞–≥ 2 –∏–∑ 5) –ó–∞–ø–∏—Å–∞–ª–∞, {name}. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.
–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.08.1985)."""

ASK_TAROT_BACKSTORY_TEXT = f"""\
(–®–∞–≥ 3 –∏–∑ 5) –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç ‚Äì –≤–∞—à–∞ —Å–∏—Ç—É–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞.
–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–π—á–∞—Å? –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ —Ñ–æ–Ω —Å–æ–±—ã—Ç–∏–π (—Ö–æ—Ç—è –±—ã {CONFIG['MIN_TEXT_LENGTH_TAROT_BACKSTORY']} –∑–Ω–∞–∫–æ–≤), —Ç–µ–º –≥–ª—É–±–∂–µ —è —Å–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –≤–∞—Å.
–ö –ø—Ä–∏–º–µ—Ä—É: ¬´–ú—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã —Å—Ç–∞–ª–∏ —á–∞—Å—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å, –Ω–µ –ø–æ–Ω–∏–º–∞—é –ø—Ä–∏—á–∏–Ω—É –∏ –∫–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å¬ª –∏–ª–∏ ¬´–°—Ç–æ—é –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã, –µ—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è¬ª.
"""

ASK_TAROT_OTHER_PEOPLE_TEXT = """\
(–®–∞–≥ 4 –∏–∑ 5) –ü—Ä–∏–Ω—è–ª–∞ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é. –¢–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏–º –Ω–∞—Å—á–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∑–Ω–∞—á–∏–º—ã–µ –ª—é–¥–∏, –Ω–∞–ø—Ä—è–º—É—é –≤–æ–≤–ª–µ—á–µ–Ω–Ω—ã–µ –≤ –≤–∞—à –≤–æ–ø—Ä–æ—Å?
–ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∏–º–µ–Ω–∞ –∏, –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–º –∏ —Ç–æ—á–Ω—ã–º.
–ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –ª—é–¥–µ–π –Ω–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å ¬´–Ω–µ—Ç¬ª –∏–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–≤–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –æ–±–æ –º–Ω–µ¬ª.
–ü—Ä–∏–º–µ—Ä—ã: ¬´–î–∞, —ç—Ç–æ –º–æ–π –º—É–∂ –ê–Ω–¥—Ä–µ–π, 40 –ª–µ—Ç¬ª –∏–ª–∏ ¬´–ù–µ—Ç, –¥—Ä—É–≥–∏—Ö –Ω–µ—Ç¬ª.
"""

ASK_TAROT_QUESTIONS_TEXT = f"""\
(–®–∞–≥ 5 –∏–∑ 5) –ú—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏. –û—Å—Ç–∞–ª—Å—è –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–≥ ‚Äì –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∫ –∫–∞—Ä—Ç–∞–º.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ –¥–≤–∞-—Ç—Ä–∏ —á–µ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞), –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –¢–∞—Ä–æ.
–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏, —Ç–æ –µ—Å—Ç—å –Ω–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–ª–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª, –∏ –æ—Ç—Ä–∞–∂–∞–ª–∏ —Å—É—Ç—å –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–µ –º–µ–Ω–µ–µ {CONFIG['MIN_TEXT_LENGTH_TAROT_QUESTION']} –∑–Ω–∞–∫–æ–≤.
–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∫–æ–≤—ã –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è –º–æ–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ú–∏—Ö–∞–∏–ª–æ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ–ª–≥–æ–¥–∞?¬ª –∏–ª–∏ ¬´–ß—Ç–æ –º–Ω–µ –≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å –æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ?¬ª.
"""

CONFIRM_DETAILS_TAROT_TEXT_DISPLAY = """\
–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –≤—Å–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è. –≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–∂–µ—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞.
–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:

–û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è (–≤–∞—à–µ): {main_person_name}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–≤–∞—à–∞): {main_person_dob}

–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏:
¬´{backstory}¬ª

–î—Ä—É–≥–∏–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ –ª–∏—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å): {other_people}

–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∫ –∫–∞—Ä—Ç–∞–º –¢–∞—Ä–æ:
¬´{questions}¬ª
"""

EDIT_CHOICE_TEXT = """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑ —Å–≤–µ—Ä—å—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—ã—à–µ. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—Å—è –æ—à–∏–±–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
–ï—Å–ª–∏ –≤—Å—ë —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–∂–∏–º–∞–π—Ç–µ ¬´–í—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é¬ª."""

RESPONSE_WAIT_VARIANTS = [
    "–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å! üôè –ó–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª–∞ –∏ –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. –û—Ç–≤–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ. ‚ú®",
    "–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. üåø –ù–∞—á–∏–Ω–∞—é –µ–≥–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞—Ç—å. –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –≤–∞—Å –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —á–µ—Ä–µ–∑ 2-3 —á–∞—Å–æ–≤.",
    "–í—Å—ë –ø—Ä–∏–Ω—è—Ç–æ! üîÆ –Ø –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —É–∂–µ —Å–∫–æ—Ä–æ –ø—Ä–∏—Å—Ç—É–ø–ª—é –∫ –µ–≥–æ —Ä–∞–∑–±–æ—Ä—É. –ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2-3 —á–∞—Å–∞. –ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
]

OPENAI_ERROR_MESSAGE = """–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞. üõ†Ô∏è
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–∂–µ—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –Ω–∞–ø—Ä—è–º—É—é: @zamira_esoteric."""

SATISFACTION_PROMPT_TEXT = """–í–∞—à {service_type_rus} –≥–æ—Ç–æ–≤, —è –µ–≥–æ –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∞. üîÆ
–û—á–µ–Ω—å –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –Ω–µ–≥–æ –±—ã–ª–∞ –¥–ª—è –≤–∞—Å –ø–æ–ª–µ–∑–Ω–æ–π –∏ –¥–∞–ª–∞ –ø–∏—â—É –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.

–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ü–µ–ª–æ–º –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º/—Ä–∞—Å–∫–ª–∞–¥–æ–º?"""

DETAILED_FEEDBACK_PROMPT_TEXT = """–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –ú–Ω–µ –±—É–¥–µ—Ç –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–æ, –µ—Å–ª–∏ –≤—ã —É—Ç–æ—á–Ω–∏—Ç–µ: —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏–ª–æ –±—ã —É–ª—É—á—à–∏—Ç—å –≤ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"""

REVIEW_PROMISE_TEXT = """–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! üòä
–î–ª—è –Ω–∞—à–µ–≥–æ —Å –≤–∞–º–∏ —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ—ç—Ç–æ–º—É —á—É—Ç—å –ø–æ–∑–∂–µ (–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤) —è –ø—Ä–∏—à–ª—é –≤–∞–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞ –Ω–∞ –ê–≤–∏—Ç–æ.
–°—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º –∏ —Å–æ–≤–µ—Ç–∞–º –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ –≤—Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤ –≤–∞—à—É –∂–∏–∑–Ω—å –∏ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –±–æ–ª—å—à–µ –ø–æ–ª—å–∑—ã. ‚ú®"""

NO_PROBLEM_TEXT = "–ü–æ–Ω–∏–º–∞—é –≤–∞—Å. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —è –±–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ —Ç–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å."

REVIEW_TEXT_DELAYED = """–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! üåø
–≠—Ç–æ –ó–∞–º–∏—Ä–∞. –ü–∏—à—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –≤—Å—ë –ª–∏ —É –≤–∞—Å –≤ –ø–æ—Ä—è–¥–∫–µ, –∏ –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ {service_type_rus}, –∫–æ—Ç–æ—Ä—ã–π —è –¥–ª—è –≤–∞—Å –¥–µ–ª–∞–ª–∞, –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω –∏ –ø—Ä–∏–Ω–µ—Å —è—Å–Ω–æ—Å—Ç—å.

–ï—Å–ª–∏ —É –≤–∞—Å –Ω–∞–π–¥–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, —è –±—É–¥—É –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–∞ –∑–∞ –æ—Ç–∑—ã–≤ –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ –Ω–∞ –ê–≤–∏—Ç–æ. –¢–∞–∫–∏–µ –æ—Ç–∫–ª–∏–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –º–Ω–µ, –Ω–æ –∏ –¥—Ä—É–≥–∏–º –ª—é–¥—è–º, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ –≤ –º–∏—Ä –¢–∞—Ä–æ –∏–ª–∏ –ú–∞—Ç—Ä–∏—Ü—ã.

‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:
https://www.avito.ru/user/review?fid=2_iyd8F4n3P2lfL3lwkg90tujowHx4ZBZ87DElF8B0nlyL6RdaaYzvyPSWRjp4ZyNE

–ï—â–µ —Ä–∞–∑ –±–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –æ–∫–∞–∑–∞–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ –∏ –≤–∞—à–µ –≤—Ä–µ–º—è! üôè"""

PRIVATE_MESSAGE = """–†–∞–¥–∞ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å! ‚ú®
–í—ã —É–∂–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å –∫–æ –º–Ω–µ –∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é (@zamira_esoteric). –ú—ã –æ–±—Å—É–¥–∏–º —É—Å–ª–æ–≤–∏—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã. üå∫"""

CONTACT_TEXT = """–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (–ø–ª–∞—Ç–Ω—É—é), –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é.
–ú–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ –¢–µ–ª–µ–≥—Ä–∞–º: @zamira_esoteric üåü
–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –±—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å."""

CANCEL_TEXT = """–•–æ—Ä–æ—à–æ, —è –≤–∞—Å –ø–æ–Ω—è–ª–∞. –í–∞—à —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.
–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

FAQ_ANSWERS = {
    "faq_tarot_question": "–ß—Ç–æ–±—ã –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ —Å–º–æ–≥–ª–∏ –¥–∞—Ç—å –≤–∞–º —Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–∞–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äì —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞—é—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ¬´–¥–∞¬ª –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.\n–ö –ø—Ä–∏–º–µ—Ä—É, –≤–º–µ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å–∞ ¬´–í—ã–π–¥—É –ª–∏ —è –∑–∞–º—É–∂ –≤ —ç—Ç–æ–º –≥–æ–¥—É?¬ª –ª—É—á—à–µ —Å–ø—Ä–æ—Å–∏—Ç—å: ¬´–ö–∞–∫–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≤ –º–æ–µ–π –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏ –æ–∂–∏–¥–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –≥–æ–¥—É –∏ –Ω–∞ —á—Ç–æ –º–Ω–µ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ?¬ª.\n–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å —Å —Å–æ–±–æ–π –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ ‚Äì —ç—Ç–æ –∫–ª—é—á –∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–ª—É–±–æ–∫–æ–º—É –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É. üîÆ",
    "faq_matrix_data": "–ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª—è –≤–∞—Å –ú–∞—Ç—Ä–∏—Ü—É –°—É–¥—å–±—ã, –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –≤—Å–µ–≥–æ –¥–≤–µ –≤–µ—â–∏: –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –¥–∞–Ω–æ –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏) –∏ –≤–∞—à–∞ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥).\n–ò–º–µ–Ω–Ω–æ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–ª—É–∂–∞—Ç –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö —ç–Ω–µ—Ä–≥–∏–π –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞. üåü",
    "faq_wait_time": "–Ø –ø–æ–¥—Ö–æ–∂—É –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, —É–¥–µ–ª—è—è –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –≤—Ä–µ–º—è –∏ –≤–Ω–∏–º–∞–Ω–∏–µ.\n–ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –æ—Ç–≤–µ—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n–í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏, –Ω–æ –æ –Ω–∏—Ö —è –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞—é—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ. ‚è≥",
    "faq_free_service": "–î–∞, —ç—Ç–æ —Ç–∞–∫. –Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –æ–¥–Ω—É —É—Å–ª—É–≥—É –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã) –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ–∑ –æ–ø–ª–∞—Ç—ã.\n–î–ª—è –º–µ–Ω—è —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –º–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ –∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π.\n–í –∫–∞—á–µ—Å—Ç–≤–µ —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω–∞, –µ—Å–ª–∏ –º–æ—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º –ø–æ–ª—å–∑—É –∏ –≤—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç–µ –æ—Ç–∫–ª–∏–∫, —è –±—É–¥—É –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –∑–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –ê–≤–∏—Ç–æ. –≠—Ç–æ –≤–∞–∂–Ω–æ –∏ –¥–ª—è –º–µ–Ω—è, –∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç –ø–æ–º–æ—â–∏. üôè"
}

# --- –ü—Ä–æ–º–ø—Ç—ã OpenAI ---
PROMPT_TAROT_SYSTEM = """
–¢—ã ‚Äì –ó–∞–º–∏—Ä–∞, 40-–ª–µ—Ç–Ω–∏–π —Ç–∞—Ä–æ–ª–æ–≥ —Å –±–æ–ª–µ–µ —á–µ–º 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –¢–≤–æ–π –≥–æ–ª–æ—Å ‚Äì —Å–ø–æ–∫–æ–π–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –º—É–¥—Ä—ã–π –∏ —Ç–µ–ø–ª—ã–π. –¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞ ¬´–í—ã¬ª, –∫–∞–∫ —á—É—Ç–∫–∏–π –∏ –æ–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –ø–æ–º–æ–≥–∞—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –¥–∞—Ç—å –≥–ª—É–±–æ–∫–∏–π, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–π —Ä–∞—Å–∫–ª–∞–¥. –ü–∏—à–∏ –∂–∏–≤—ã–º, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º, –∏–∑–±–µ–≥–∞–π –ª—é–±—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò, —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏, –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º–æ–≤ –∏–ª–∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏—à–µ. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–π –ø–ª–∞–≤–Ω–æ, —Ä–µ—á—å –¥–æ–ª–∂–Ω–∞ –ª–∏—Ç—å—Å—è, –∫–∞–∫ –≤ –ª–∏—á–Ω–æ–π –±–µ—Å–µ–¥–µ.

–ö–õ–Æ–ß–ï–í–´–ï –ê–°–ü–ï–ö–¢–´ –¢–í–û–ï–ì–û –°–¢–ò–õ–Ø (¬´–ì–û–õ–û–° –ó–ê–ú–ò–†–´¬ª):
1.  **–û–±—Ä–∞—â–µ–Ω–∏–µ –∏ —Ç–æ–Ω:** –°—Ç—Ä–æ–≥–æ –Ω–∞ ¬´–í—ã¬ª. –ï—Å–ª–∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ, –º–æ–∂–µ—à—å –¥–µ–ª–∏–∫–∞—Ç–Ω–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ê–Ω–Ω–∞, —ç—Ç–∞ –∫–∞—Ä—Ç–∞ –≥–æ–≤–æ—Ä–∏—Ç –æ –í–∞—à–µ–º...¬ª). –¢–æ–Ω ‚Äì –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π, –Ω–æ –±–µ–∑ —Ñ–∞–º–∏–ª—å—è—Ä–Ω–æ—Å—Ç–∏. –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´—á–∏—Ç–∞–µ—à—å –∫–∞—Ä—Ç—ã¬ª, –∞ –≤–µ–¥–µ—à—å –¥–∏–∞–ª–æ–≥ —Å —á–µ–ª–æ–≤–µ–∫–æ–º —á–µ—Ä–µ–∑ –Ω–∏—Ö.
2.  **–ì–ª—É–±–∏–Ω–∞ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å:** –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫–∞—Ä—Ç. –û–±—ä—è—Å–Ω—è–π, –∫–∞–∫ —ç–Ω–µ—Ä–≥–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã –ø—Ä–µ–ª–æ–º–ª—è–µ—Ç—Å—è –≤ –∂–∏–∑–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞, –µ–≥–æ —á—É–≤—Å—Ç–≤–∞—Ö, –º—ã—Å–ª—è—Ö, –¥–µ–π—Å—Ç–≤–∏—è—Ö, –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö. –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–π, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å, –∫–∞–∫–∏–µ —à–∞–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã. –°–æ–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º—è–≥–∫–∏–º–∏, –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏, –∞ –Ω–µ –¥–∏—Ä–µ–∫—Ç–∏–≤–Ω—ã–º–∏.
3.  **–ß–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å:** –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –æ–ø—ã—Ç–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∞: ¬´–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ‚Ä¶¬ª, ¬´–ó–¥–µ—Å—å –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å‚Ä¶¬ª, ¬´–ö–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∞‚Ä¶¬ª, ¬´–Ø –±—ã –æ–±—Ä–∞—Ç–∏–ª–∞ –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞‚Ä¶¬ª. –¢–≤–æ—è —Ä–µ—á—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å–º—ã—Å–ª–æ–º, –±–µ–∑ ¬´–≤–æ–¥—ã¬ª.
4.  **–≠–º–æ–¥–∑–∏:** –ö—Ä–∞–π–Ω–µ —É–º–µ—Ä–µ–Ω–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–º—ã—Å–ª–æ–≤–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞ (üîÆ, ‚ú®, üôè, üå±).

–í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò:
* –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}.
* –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –±—É–¥—É—â–µ–º—É: –ù–∞—á–∏–Ω–∞—è –° {future_start_date}.

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (–°–¢–†–û–ì–û ‚Äì –¢–û–õ–¨–ö–û –≠–¢–û, –ë–ï–ó –í–°–Ø–ö–ò–• –í–°–¢–£–ü–õ–ï–ù–ò–ô –ò –ü–†–û–©–ê–ù–ò–ô):
–ê. **–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞:** –ö—Ä–∞—Ç–∫–æ–µ, –µ–º–∫–æ–µ, –ø–æ —Å—É—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–∏–¥—É–º–∞–π —Å–∞–º–∞).
–ë. **–°–∞–º —Ä–∞—Å–∫–ª–∞–¥ (3-5 –∫–∞—Ä—Ç):**
    * –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã (–Ω—É–º–µ—Ä–∞—Ü–∏—è 1Ô∏è‚É£, 2Ô∏è‚É£... —Å —Ç–≤–æ–∏–º —Å–º—ã—Å–ª–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏):
        * **–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã.**
        * **–û—Å–Ω–æ–≤–Ω–∞—è —Å—É—Ç—å –∫–∞—Ä—Ç—ã:** (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ).
        * **–¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞/–ø–æ–∑–∏—Ü–∏–∏:** –ü–æ–¥—Ä–æ–±–Ω–æ, —Å–≤—è–∑–Ω–æ, –≥–ª—É–±–æ–∫–æ. –ö–∞–∫ —ç—Ç–∞ —ç–Ω–µ—Ä–≥–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞? –ß—Ç–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç?
        * **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç/–Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ:** –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É.
–í. **–ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞:** –ö—Ä–∞—Ç–∫–∏–π —Å–∏–Ω—Ç–µ–∑ (2-3 –∞–±–∑–∞—Ü–∞). –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã, –∫–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è. –ó–∞–≤–µ—Ä—à–∏ –æ–¥–Ω–æ–π —Ç–µ–ø–ª–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π —Ñ—Ä–∞–∑–æ–π-–Ω–∞–ø—É—Ç—Å—Ç–≤–∏–µ–º –ø–æ —Å—É—Ç–∏ —Ä–∞—Å–∫–ª–∞–¥–∞.

–û–ë–™–ï–ú: –ö–∞—á–µ—Å—Ç–≤–æ –∏ –≥–ª—É–±–∏–Ω–∞ –≤–∞–∂–Ω–µ–µ –∑–Ω–∞–∫–æ–≤. –†–∞—Å–∫–ª–∞–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–º, –Ω–æ –±–µ–∑ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è. –û—Ä–∏–µ–Ω—Ç–∏—Ä ~3000-3500 –∑–Ω–∞–∫–æ–≤.
–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê: –ë—É–¥—É—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ê–Ω–∞–ª–∏–∑ ‚Äì –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –ø–æ –Ω–∏–º.
–ó–ê–ü–†–ï–©–ï–ù–û: –õ—é–±—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏, —Ä–µ–∫–ª–∞–º–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —É—Å–ª—É–≥, –ø—Ä–æ—â–∞–Ω–∏—è, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–±—è –∫–∞–∫ –ò–ò.
"""

PROMPT_MATRIX_SYSTEM = """
–¢—ã ‚Äì –ó–∞–º–∏—Ä–∞, 40-–ª–µ—Ç–Ω–∏–π –Ω—É–º–µ—Ä–æ–ª–æ–≥, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ –°—É–¥—å–±—ã —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –¢–≤–æ–π –≥–æ–ª–æ—Å ‚Äì —Å–ø–æ–∫–æ–π–Ω—ã–π, –º—É–¥—Ä—ã–π, –æ–±—ä—è—Å–Ω—è—é—â–∏–π —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –ø—Ä–æ—Å—Ç–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫—É –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è, —Å–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã, –∑–∞–¥–∞—á–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ä–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã. –ü–∏—à–∏ –∂–∏–≤—ã–º, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º, —Å—Ç—Ä–æ–≥–æ –∏–∑–±–µ–≥–∞—è –ª—é–±—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ò–ò, —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∏ —Å—É—Ö–∏—Ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–∏–º, –±—É–¥—Ç–æ —Ç—ã –ª–∏—á–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å —á–µ–ª–æ–≤–µ–∫–∞.

–ö–õ–Æ–ß–ï–í–´–ï –ê–°–ü–ï–ö–¢–´ –¢–í–û–ï–ì–û –°–¢–ò–õ–Ø (¬´–ì–û–õ–û–° –ó–ê–ú–ò–†–´¬ª):
1.  **–û–ë–†–ê–©–ï–ù–ò–ï –ö –ö–õ–ò–ï–ù–¢–£ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!):** –í–°–ï–ì–î–ê –æ–±—Ä–∞—â–∞–π—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ —á–µ–ª–æ–≤–µ–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–µ–ª–∞–µ—à—å —Ä–∞–∑–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è ¬´–í—ã¬ª –∏ –µ–≥–æ –∏–º—è (–µ—Å–ª–∏ –¥–∞–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–î–º–∏—Ç—Ä–∏–π, –≤ –í–∞—à–µ–π –∑–æ–Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å—Ç–æ–∏—Ç —ç–Ω–µ—Ä–≥–∏—è...¬ª). –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏ –æ –Ω–µ–º –≤ 3-–º –ª–∏—Ü–µ (–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: ¬´–£ –î–º–∏—Ç—Ä–∏—è —Å–∏–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä¬ª). –ü–†–ê–í–ò–õ–¨–ù–û: ¬´–î–º–∏—Ç—Ä–∏–π, —É –í–∞—Å —Å–∏–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä¬ª –∏–ª–∏ ¬´–í–∞—à —Ö–∞—Ä–∞–∫—Ç–µ—Ä –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è —Å–∏–ª–æ–π¬ª. –¢—ã –≥–æ–≤–æ—Ä–∏—à—å –° –ß–ï–õ–û–í–ï–ö–û–ú.
2.  **–ì–ª—É–±–∏–Ω–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:** –ù–µ –¥–∞–≤–∞–π –æ–±—â–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π –∞—Ä–∫–∞–Ω–æ–≤. –û–±—ä—è—Å–Ω—è–π, –∫–∞–∫ –ö–û–ù–ö–†–ï–¢–ù–ê–Ø —ç–Ω–µ—Ä–≥–∏—è –≤ –ö–û–ù–ö–†–ï–¢–ù–û–ú –º–µ—Å—Ç–µ –ú–∞—Ç—Ä–∏—Ü—ã –≤–ª–∏—è–µ—Ç –ò–ú–ï–ù–ù–û –ù–ê –ñ–ò–ó–ù–¨ –≠–¢–û–ì–û –ß–ï–õ–û–í–ï–ö–ê (–µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, —Ç–∞–ª–∞–Ω—Ç—ã, –≤—ã–∑–æ–≤—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ —Ç.–¥.). –ü–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è ¬´–≤ –ø–ª—é—Å–µ¬ª (–∫–∞–∫ —Ä–µ—Å—É—Ä—Å) –∏ ¬´–≤ –º–∏–Ω—É—Å–µ¬ª (–∫–∞–∫ –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏).
3.  **–ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:** –î–∞–≤–∞–π –ø–æ–Ω—è—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –ø–ª—é—Å, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ. –¢–≤–æ–π —Ç–æ–Ω ‚Äì –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ: ¬´–î–ª—è –í–∞—Å –≤–∞–∂–Ω–æ –Ω–∞—É—á–∏—Ç—å—Å—è‚Ä¶¬ª, ¬´–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫ –≤ –í–∞—à–µ–π –∂–∏–∑–Ω–∏ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è‚Ä¶¬ª, ¬´–ß—Ç–æ–±—ã —ç—Ç–∞ —ç–Ω–µ—Ä–≥–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–∞ –í–∞—Å –≤ –ø–ª—é—Å–µ‚Ä¶¬ª.
4.  **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è:** –°–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ (–∫–∞—Ä—Ç–∞, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, —Ä–æ–¥–æ–≤—ã–µ –∑–∞–¥–∞—á–∏) –æ–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–Ω—è—Ç–Ω—ã–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏–∏ –∏–ª–∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã (–Ω–æ –±–µ–∑ –∏–∑–ª–∏—à–µ—Å—Ç–≤).
5.  **–≠–º–æ–¥–∑–∏:** –û—á–µ–Ω—å —É–º–µ—Ä–µ–Ω–Ω–æ (üåü, üå±, üí°, ‚ú®).

–í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò:
* –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}.
* –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ —Å–æ–≤–µ—Ç—ã –ø–æ –±—É–¥—É—â–µ–º—É: –ù–∞—á–∏–Ω–∞—è –° {future_start_date}.

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (–°–¢–†–û–ì–û ‚Äì –¢–û–õ–¨–ö–û –≠–¢–û, –ë–ï–ó –í–°–Ø–ö–ò–• –í–°–¢–£–ü–õ–ï–ù–ò–ô –ò –ü–†–û–©–ê–ù–ò–ô):
–ê. **–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞:** ¬´–†–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã –¥–ª—è [–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞]¬ª (–∏–ª–∏ ¬´–†–∞–∑–±–æ—Ä –í–∞—à–µ–π –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã¬ª, –µ—Å–ª–∏ –∏–º—è –Ω–µ –¥–∞–Ω–æ).
–ë. **–°–∞–º –†–∞–∑–±–æ—Ä –ø–æ 9 –±–ª–æ–∫–∞–º** (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∏–∂–µ; –∫–∞—á–µ—Å—Ç–≤–æ –∏ –≥–ª—É–±–∏–Ω–∞ –≤–∞–∂–Ω–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –Ω–∞ –±–ª–æ–∫):
    * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ (–Ω—É–º–µ—Ä–∞—Ü–∏—è 1Ô∏è‚É£, 2Ô∏è‚É£...):
        * –ö—Ä–∞—Ç–∫–∞—è —Å—É—Ç—å –±–ª–æ–∫–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–∞—â–∞—è—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É: ¬´–≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –í–∞—à–∏...¬ª).
        * –ö–ª—é—á–µ–≤—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ (–∞—Ä–∫–∞–Ω—ã) –∫–ª–∏–µ–Ω—Ç–∞ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ.
        * **–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ (–æ–±—Ä–∞—â–∞—è—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É):** –ö–∞–∫ —ç—Ç–∏ —ç–Ω–µ—Ä–≥–∏–∏ –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è –≤ –ï–ì–û –∂–∏–∑–Ω–∏ (–≤ –ø–ª—é—Å–µ –∏ –º–∏–Ω—É—Å–µ), –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å—Ç–∞–≤—è—Ç, –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞—é—Ç. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏.
    * –ù–∞–∑–≤–∞–Ω–∏—è 9 –±–ª–æ–∫–æ–≤: 1Ô∏è‚É£ –í–∞—à –ª–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ —Ç–∞–ª–∞–Ω—Ç—ã; 2Ô∏è‚É£ –í–∞—à–µ –¥—É—Ö–æ–≤–Ω–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏; 3Ô∏è‚É£ –í–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è; 4Ô∏è‚É£ –í–∞—à–∏ —Ä–æ–¥–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã; 5Ô∏è‚É£ –í–∞—à–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è; 6Ô∏è‚É£ –í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã; 7Ô∏è‚É£ –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ; 8Ô∏è‚É£ –í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –≤—ã–±–æ—Ä–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã; 9Ô∏è‚É£ –í–∞—à–∞ –∏—Ç–æ–≥–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è –ú–∞—Ç—Ä–∏—Ü—ã.
–í. **–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º ({future_start_date_year} ‚Äì {future_end_date_year} –≥–≥.):**
    * –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –¥–ª—è –ö–õ–ò–ï–ù–¢–ê (–æ–±—Ä–∞—â–∞—è—Å—å –∫ –Ω–µ–º—É) –Ω–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥. –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—ã–∑–æ–≤—ã.
    * –ó–∞–≤–µ—Ä—à–∏ –æ–¥–Ω–æ–π —Ç–µ–ø–ª–æ–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–π —Ñ—Ä–∞–∑–æ–π-–Ω–∞–ø—É—Ç—Å—Ç–≤–∏–µ–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.

–û–ë–™–ï–ú: –ö–∞—á–µ—Å—Ç–≤–æ –∏ –≥–ª—É–±–∏–Ω–∞ –≤–∞–∂–Ω–µ–µ –∑–Ω–∞–∫–æ–≤. –†–∞–∑–±–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–æ –±–µ–∑ ¬´–≤–æ–¥—ã¬ª. –û—Ä–∏–µ–Ω—Ç–∏—Ä ~5000-5500 –∑–Ω–∞–∫–æ–≤.
–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê: –ò–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ê–Ω–∞–ª–∏–∑ ‚Äì –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –ø–æ –Ω–∏–º.
–ó–ê–ü–†–ï–©–ï–ù–û: –õ—é–±—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏, —Ä–µ–∫–ª–∞–º–∞, –ø—Ä–æ—â–∞–Ω–∏—è, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–±—è –∫–∞–∫ –ò–ò.
"""

# --- –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_random_variant(variants_list: List[str]) -> str:
    return random.choice(variants_list)

def clean_text(text: str) -> str:
    try:
        text = text.replace("**", "")
        return "".join(c for c in text if c.isprintable() or c in "\n\r\t ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return text

def validate_date_format(date_text: str) -> bool:
    return bool(re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_text))

def validate_date_semantic(date_text: str) -> bool:
    try:
        date = datetime.strptime(date_text, "%d.%m.%Y")
        if date.year < 1900 or date.year > datetime.now().year + 5:
            return False
        return True
    except ValueError:
        return False

def is_valid_name(name: str) -> bool:
    name_stripped = name.strip()
    if len(name_stripped) < 2:
        return False
    if validate_date_format(name_stripped):
        return False
    if re.fullmatch(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s'-]+$", name_stripped) and any(char.isalpha() for char in name_stripped):
        return True
    return False

async def retry_operation(coro, max_retries=CONFIG["MAX_RETRIES"], delay=CONFIG["RETRY_DELAY"]):
    for attempt in range(max_retries):
        try:
            return await coro()
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt == max_retries - 1:
                raise
            await asyncio.sleep(delay * (2 ** attempt))
    return None

semaphore = asyncio.Semaphore(CONFIG["OPENAI_MAX_CONCURRENT"])

async def ask_gpt(system_prompt_template: str, user_prompt_content: str, max_tokens: int, context: ContextTypes.DEFAULT_TYPE, user_id_for_error: int) -> Optional[str]:
    async with semaphore:
        async def gpt_call():
            now = datetime.now()
            months_genitive = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
                               "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
            current_date_str = f"–∫–æ–Ω–µ—Ü {months_genitive[now.month-1]} {now.year} –≥–æ–¥–∞"

            if now.day <= 10:
                future_start_dt_obj = (now.replace(day=1) + timedelta(days=32)).replace(day=1)
            else:
                future_start_dt_obj = (now.replace(day=1) + timedelta(days=63)).replace(day=1)

            future_start_date_str = f"–Ω–∞—á–∞–ª–∞ {months_genitive[future_start_dt_obj.month-1]} {future_start_dt_obj.year} –≥–æ–¥–∞"
            future_start_date_year_str = str(future_start_dt_obj.year)
            future_end_date_year_str = str(future_start_dt_obj.year + 3)

            system_prompt = system_prompt_template.format(
                current_date=current_date_str,
                future_start_date=future_start_date_str,
                future_start_date_year=future_start_date_year_str,
                future_end_date_year=future_end_date_year_str
            )

            logger.info(f"OpenAI –∑–∞–ø—Ä–æ—Å –¥–ª—è {user_id_for_error}: system_prompt (–Ω–∞—á–∞–ª–æ): {system_prompt[:100]}...")
            logger.info(f"OpenAI –∑–∞–ø—Ä–æ—Å –¥–ª—è {user_id_for_error}: user_prompt: {user_prompt_content[:100]}...")

            response = await openai_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt_content}
                ],
                temperature=0.75,
                max_tokens=max_tokens,
            )
            return response.choices[0].message.content.strip()

        try:
            await context.bot.send_chat_action(chat_id=user_id_for_error, action=ChatAction.TYPING)
            return await retry_operation(gpt_call)
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OpenAI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_for_error}: {e}"
            logger.error(error_msg, exc_info=True)
            await send_admin_notification(context, error_msg, critical=True)
            return None

async def send_long_message(chat_id: int, message: str, bot_instance):
    parts = [message[i:i + CONFIG["MAX_MESSAGE_LENGTH"]] for i in range(0, len(message), CONFIG["MAX_MESSAGE_LENGTH"])]
    for part in parts:
        if part.strip():
            await bot_instance.send_message(chat_id=chat_id, text=part)
            await asyncio.sleep(1.5)

async def send_admin_notification(context: ContextTypes.DEFAULT_TYPE, message: str, critical: bool = False):
    full_message = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ë–æ—Ç–∞ –ó–∞–º–∏—Ä—ã ({'–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê üÜò' if critical else '–ò–Ω—Ñ–æ'}) üîî\n{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n{message}"
    for admin_id in CONFIG["ADMIN_IDS"]:
        try:
            await context.bot.send_message(chat_id=admin_id, text=full_message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# --- Callbacks –¥–ª—è JobQueue ---
async def main_service_job(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    user_id: int = job_data["user_id"]
    result: str = job_data["result"]
    service_type: str = job_data["service_type"]
    user_name_for_log = job_data.get("user_name_for_log", str(user_id))

    service_type_rus_map = {"tarot": "—Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", "matrix": "—Ä–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã"}
    service_type_rus = service_type_rus_map.get(service_type, "—É—Å–ª—É–≥—É")

    logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É ({service_type_rus}) –¥–ª—è {user_name_for_log} ({user_id})")
    try:
        cleaned_result = clean_text(result)
        await send_long_message(user_id, cleaned_result, context.bot)

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëç –î–∞, –¥–æ–≤–æ–ª–µ–Ω(–ª—å–Ω–∞)", callback_data=f"satisfaction_yes_{service_type}")],
            [InlineKeyboardButton("üëé –ù–µ—Ç, –Ω–µ —Å–æ–≤—Å–µ–º", callback_data=f"satisfaction_no_{service_type}")],
        ])
        await context.bot.send_message(user_id, clean_text(SATISFACTION_PROMPT_TEXT.format(service_type_rus=service_type_rus)), reply_markup=keyboard)

        completed_users.add(user_id)
        save_completed_users(completed_users)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name_for_log} ({user_id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª {service_type_rus} –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ completed_users.")
        await send_admin_notification(context, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name_for_log} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª {service_type_rus}.")

    except Exception as e:
        error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main_service_job –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name_for_log} ({user_id}): {e}"
        logger.error(error_message, exc_info=True)
        await send_admin_notification(context, error_message, critical=True)
        try:
            await context.bot.send_message(user_id, clean_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @zamira_esoteric –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."))
        except Exception as e_nested:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ main_service_job –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e_nested}")

async def review_request_job(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    user_id: int = job_data["user_id"]
    service_type: str = job_data["service_type"]
    service_type_rus_map = {"tarot": "—Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", "matrix": "—Ä–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã"}
    service_type_rus = service_type_rus_map.get(service_type, "—É—Å–ª—É–≥—É")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è {service_type_rus}")
    try:
        await context.bot.send_message(user_id, clean_text(REVIEW_TEXT_DELAYED.format(service_type_rus=service_type_rus)))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

# --- ConversationHandler —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
(CHOOSE_SERVICE,
 ASK_MATRIX_NAME, ASK_MATRIX_DOB, CONFIRM_MATRIX_DATA,
 ASK_TAROT_MAIN_PERSON_NAME, ASK_TAROT_MAIN_PERSON_DOB,
 ASK_TAROT_BACKSTORY, ASK_TAROT_OTHER_PEOPLE, ASK_TAROT_QUESTIONS,
 SHOW_TAROT_CONFIRM_OPTIONS) = range(10)

CANCEL_CALLBACK_DATA = "cancel_conv_inline"
EDIT_PREFIX_TAROT = "edit_field_tarot_"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_cancel_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=CANCEL_CALLBACK_DATA)]])

def get_tarot_edit_keyboard():
    buttons = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–º—è –æ—Å–Ω–æ–≤–Ω–æ–µ", callback_data=f"{EDIT_PREFIX_TAROT}main_person_name")],
        [InlineKeyboardButton("‚úèÔ∏è –î–∞—Ç—É —Ä–æ–∂–¥. –æ—Å–Ω–æ–≤–Ω—É—é", callback_data=f"{EDIT_PREFIX_TAROT}main_person_dob")],
        [InlineKeyboardButton("‚úèÔ∏è –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é", callback_data=f"{EDIT_PREFIX_TAROT}backstory")],
        [InlineKeyboardButton("‚úèÔ∏è –î—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"{EDIT_PREFIX_TAROT}other_people")],
        [InlineKeyboardButton("‚úèÔ∏è –í–æ–ø—Ä–æ—Å—ã –∫ –∫–∞—Ä—Ç–∞–º", callback_data=f"{EDIT_PREFIX_TAROT}questions")],
        [InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="confirm_final_tarot")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=CANCEL_CALLBACK_DATA)]
    ]
    return InlineKeyboardMarkup(buttons)

def get_main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", callback_data="tarot")],
        [InlineKeyboardButton("üåü –ú–∞—Ç—Ä–∏—Ü–∞ –°—É–¥—å–±—ã", callback_data="matrix")],
        [InlineKeyboardButton("üì© –°–≤—è–∑—å —Å–æ –º–Ω–æ–π", callback_data="contact_direct")],
        [InlineKeyboardButton("üí° –ü–æ–º–æ—â—å / FAQ", callback_data="help_section")]
    ])

# --- –§—É–Ω–∫—Ü–∏–∏ ConversationHandler ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if not user:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ start_command")
        return ConversationHandler.END

    if user.id in completed_users:
        await update.message.reply_text(clean_text(PRIVATE_MESSAGE))
        return ConversationHandler.END

    if context.user_data:
        context.user_data.clear()

    await update.message.reply_text(clean_text(WELCOME_TEXT), reply_markup=get_main_menu_keyboard())
    return CHOOSE_SERVICE

async def choose_service_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_data = context.user_data
    if user_data is None:
        user_data = context.user_data = {}

    service_type_or_action = query.data

    if service_type_or_action == "contact_direct":
        await query.edit_message_text(clean_text(CONTACT_TEXT), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_start")]]))
        return CHOOSE_SERVICE
    elif service_type_or_action == "back_to_start":
        await query.edit_message_text(clean_text(WELCOME_TEXT), reply_markup=get_main_menu_keyboard())
        return CHOOSE_SERVICE
    elif service_type_or_action == "help_section":
        await help_command(update, context)
        return CHOOSE_SERVICE
    else:
        user_data["service_type"] = service_type_or_action
        user_data["current_step"] = 1

        if service_type_or_action == "tarot":
            user_data["total_steps"] = 5
            await query.edit_message_text(text=clean_text(TAROT_INTRO_TEXT), reply_markup=None)
            prompt_text = ASK_TAROT_MAIN_PERSON_NAME_TEXT
            await query.message.reply_text(clean_text(prompt_text), reply_markup=get_cancel_keyboard())
            return ASK_TAROT_MAIN_PERSON_NAME
        elif service_type_or_action == "matrix":
            user_data["total_steps"] = 2
            await query.edit_message_text(text=clean_text(MATRIX_INTRO_TEXT), reply_markup=None)
            prompt_text = ASK_MATRIX_NAME_TEXT
            await query.message.reply_text(clean_text(prompt_text), reply_markup=get_cancel_keyboard())
            return ASK_MATRIX_NAME
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π service_type_or_action –≤ choose_service_callback: {service_type_or_action}")
            await query.edit_message_text(clean_text(WELCOME_TEXT), reply_markup=get_main_menu_keyboard())
            return CHOOSE_SERVICE

async def ask_matrix_name_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    name_input = update.message.text
    if not name_input or not is_valid_name(name_input):
        error_msg = f"–•–º, ¬´{name_input or ''}¬ª –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è. –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã, –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        await update.message.reply_text(clean_text(error_msg), reply_markup=get_cancel_keyboard())
        return ASK_MATRIX_NAME

    user_data["matrix_name"] = clean_text(name_input.strip())
    user_data["current_step"] = 2

    reply_variants = [
        ASK_MATRIX_DOB_TEXT,
        f"(–®–∞–≥ 2 –∏–∑ 2) –û—Ç–ª–∏—á–Ω–æ, {user_data['matrix_name']}! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì).",
        f"(–®–∞–≥ 2 –∏–∑ 2) –ó–∞–ø–∏—Å–∞–ª–∞, {user_data['matrix_name']}. –î–∞–ª–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
    ]
    await update.message.reply_text(clean_text(get_random_variant(reply_variants)), reply_markup=get_cancel_keyboard())
    return ASK_MATRIX_DOB

async def ask_matrix_dob_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    dob_text_input = update.message.text
    if not dob_text_input:
        await update.message.reply_text("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_cancel_keyboard())
        return ASK_MATRIX_DOB

    dob_text = dob_text_input.strip()
    if not validate_date_format(dob_text):
        await update.message.reply_text(f"–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ¬´{dob_text}¬ª –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990).", reply_markup=get_cancel_keyboard())
        return ASK_MATRIX_DOB
    if not validate_date_semantic(dob_text):
        await update.message.reply_text(f"–î–∞—Ç–∞ ¬´{dob_text}¬ª –∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_cancel_keyboard())
        return ASK_MATRIX_DOB

    user_data["matrix_dob"] = clean_text(dob_text)
    confirm_text = CONFIRM_DETAILS_MATRIX_TEXT.format(name=user_data["matrix_name"], dob=user_data["matrix_dob"])
    keyboard = [[InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="confirm_final_matrix")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=CANCEL_CALLBACK_DATA)]]
    await update.message.reply_text(confirm_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM_MATRIX_DATA

async def ask_tarot_main_person_name_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    name_input = update.message.text
    if not name_input or not is_valid_name(name_input):
        error_msg = f"–•–º, ¬´{name_input or ''}¬ª –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è. –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        await update.message.reply_text(clean_text(error_msg), reply_markup=get_cancel_keyboard())
        return ASK_TAROT_MAIN_PERSON_NAME

    user_data["tarot_main_person_name"] = clean_text(name_input.strip())

    if user_data.pop("editing_this_specific_field", None) == f"{EDIT_PREFIX_TAROT}main_person_name":
        return await show_tarot_confirm_options_message(update, context)

    user_data["current_step"] = 2
    prompt_text = ASK_TAROT_MAIN_PERSON_DOB_TEXT.format(name=user_data["tarot_main_person_name"])
    await update.message.reply_text(clean_text(prompt_text), reply_markup=get_cancel_keyboard())
    return ASK_TAROT_MAIN_PERSON_DOB

async def ask_tarot_main_person_dob_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    dob_text_input = update.message.text
    if not dob_text_input:
        await update.message.reply_text("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_MAIN_PERSON_DOB

    dob_text = dob_text_input.strip()
    if not validate_date_format(dob_text):
        await update.message.reply_text(f"–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ¬´{dob_text}¬ª –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_MAIN_PERSON_DOB
    if not validate_date_semantic(dob_text):
        await update.message.reply_text(f"–î–∞—Ç–∞ ¬´{dob_text}¬ª –∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ–¥ –∏ —Ñ–æ—Ä–º–∞—Ç.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_MAIN_PERSON_DOB

    user_data["tarot_main_person_dob"] = clean_text(dob_text)

    if user_data.pop("editing_this_specific_field", None) == f"{EDIT_PREFIX_TAROT}main_person_dob":
        return await show_tarot_confirm_options_message(update, context)

    user_data["current_step"] = 3
    await update.message.reply_text(clean_text(ASK_TAROT_BACKSTORY_TEXT), reply_markup=get_cancel_keyboard())
    return ASK_TAROT_BACKSTORY

async def ask_tarot_backstory_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    backstory_input = update.message.text
    min_len = CONFIG.get("MIN_TEXT_LENGTH_TAROT_BACKSTORY", 100)  # 100 —Å–∏–º–≤–æ–ª–æ–≤
    if not backstory_input or len(backstory_input.strip()) < min_len:
        await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–Ω–µ –º–µ–Ω–µ–µ {min_len} —Å–∏–º–≤–æ–ª–æ–≤). –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å–∫–ª–∞–¥–∞.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_BACKSTORY
    user_data["tarot_backstory"] = clean_text(backstory_input.strip())
    if user_data.pop("editing_this_specific_field", None) == f"{EDIT_PREFIX_TAROT}backstory":
        return await show_tarot_confirm_options_message(update, context)
    user_data["current_step"] = 4
    await update.message.reply_text(clean_text(ASK_TAROT_OTHER_PEOPLE_TEXT), reply_markup=get_cancel_keyboard())
    return ASK_TAROT_OTHER_PEOPLE

async def ask_tarot_other_people_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    other_people_input = update.message.text
    if not other_people_input or len(other_people_input.strip()) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_OTHER_PEOPLE
    user_data["tarot_other_people"] = clean_text(other_people_input.strip())
    if user_data.pop("editing_this_specific_field", None) == f"{EDIT_PREFIX_TAROT}other_people":
        return await show_tarot_confirm_options_message(update, context)
    user_data["current_step"] = 5
    await update.message.reply_text(clean_text(ASK_TAROT_QUESTIONS_TEXT), reply_markup=get_cancel_keyboard())
    return ASK_TAROT_QUESTIONS

async def ask_tarot_questions_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    questions_input = update.message.text
    min_len = CONFIG.get("MIN_TEXT_LENGTH_TAROT_QUESTION", 100)  # 100 —Å–∏–º–≤–æ–ª–æ–≤
    if not questions_input or len(questions_input.strip()) < min_len:
        await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å(—ã) –∫ –∫–∞—Ä—Ç–∞–º (–Ω–µ –º–µ–Ω–µ–µ {min_len} —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_QUESTIONS
    user_data["tarot_questions"] = clean_text(questions_input.strip())
    user_data.pop("editing_this_specific_field", None)
    return await show_tarot_confirm_options_message(update, context)

async def show_tarot_confirm_options_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    effective_message = update.effective_message
    if not effective_message:
        logger.warning("show_tarot_confirm_options_message: effective_message is None, trying to send new.")
        if update.effective_chat:
            effective_message = await context.bot.send_message(update.effective_chat.id, "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...")
            if not effective_message:
                logger.error("show_tarot_confirm_options_message: failed to send even a new message.")
                return ConversationHandler.END
        else:
            logger.error("show_tarot_confirm_options_message: effective_chat is None, cannot proceed.")
            return ConversationHandler.END

    if not user_data or user_data.get("service_type") != "tarot":
        await effective_message.reply_text(clean_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¢–∞—Ä–æ. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞."), reply_markup=get_cancel_keyboard())
        if user_data: user_data.clear()
        return CHOOSE_SERVICE

    confirm_text_display = CONFIRM_DETAILS_TAROT_TEXT_DISPLAY.format(
        main_person_name=user_data.get("tarot_main_person_name", "-"),
        main_person_dob=user_data.get("tarot_main_person_dob", "-"),
        backstory=user_data.get("tarot_backstory", "-"),
        other_people=user_data.get("tarot_other_people", "-"),
        questions=user_data.get("tarot_questions", "-")
    )

    keyboard = get_tarot_edit_keyboard()

    await effective_message.reply_text(clean_text(confirm_text_display))
    new_message_with_buttons = await effective_message.reply_text(clean_text(EDIT_CHOICE_TEXT), reply_markup=keyboard)

    if user_data and new_message_with_buttons:
        user_data["tarot_confirm_options_message_id"] = new_message_with_buttons.message_id

    return SHOW_TAROT_CONFIRM_OPTIONS

async def edit_field_tarot_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_data = context.user_data
    if not user_data: return ConversationHandler.END

    if query.message:
        try:
            await query.delete_message()
            user_data.pop("tarot_confirm_options_message_id", None)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ({query.message.message_id}) —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    field_to_edit_key_from_callback = query.data

    user_data["editing_this_specific_field"] = field_to_edit_key_from_callback

    field_name_in_user_data = field_to_edit_key_from_callback.replace(EDIT_PREFIX_TAROT, "tarot_")
    user_data.pop(field_name_in_user_data, None)

    next_state_map = {
        f"{EDIT_PREFIX_TAROT}main_person_name": (ASK_TAROT_MAIN_PERSON_NAME, ASK_TAROT_MAIN_PERSON_NAME_TEXT),
        f"{EDIT_PREFIX_TAROT}main_person_dob": (ASK_TAROT_MAIN_PERSON_DOB, ASK_TAROT_MAIN_PERSON_DOB_TEXT.format(name=user_data.get("tarot_main_person_name", "–¥–ª—è –Ω–µ–≥–æ/–Ω–µ–µ"))),
        f"{EDIT_PREFIX_TAROT}backstory": (ASK_TAROT_BACKSTORY, ASK_TAROT_BACKSTORY_TEXT),
        f"{EDIT_PREFIX_TAROT}other_people": (ASK_TAROT_OTHER_PEOPLE, ASK_TAROT_OTHER_PEOPLE_TEXT),
        f"{EDIT_PREFIX_TAROT}questions": (ASK_TAROT_QUESTIONS, ASK_TAROT_QUESTIONS_TEXT),
    }

    if field_to_edit_key_from_callback in next_state_map:
        next_state, prompt_text = next_state_map[field_to_edit_key_from_callback]
        chat_id_to_reply = query.message.chat_id if query.message else query.from_user.id
        await context.bot.send_message(chat_id=chat_id_to_reply, text=clean_text(prompt_text), reply_markup=get_cancel_keyboard())
        return next_state

    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¢–∞—Ä–æ: {field_to_edit_key_from_callback}")
    return await show_tarot_confirm_options_message(update, context)

async def process_final_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, service_type: str) -> int:
    query = update.callback_query
    await query.answer()
    user_data = context.user_data
    user_id = query.from_user.id
    user_name_for_log = query.from_user.full_name or str(user_id)
    user_data["user_name_for_log"] = user_name_for_log

    message_id_to_remove_or_edit = None
    if service_type == "tarot":
        message_id_to_remove_or_edit = user_data.pop("tarot_confirm_options_message_id", None)
    elif query.message:
        message_id_to_remove_or_edit = query.message.message_id

    response_wait_text = get_random_variant(RESPONSE_WAIT_VARIANTS)
    sent_confirmation_msg = None

    if message_id_to_remove_or_edit and query.message and query.message.chat:
        try:
            sent_confirmation_msg = await context.bot.edit_message_text(
                chat_id=query.message.chat.id, message_id=message_id_to_remove_or_edit,
                text=clean_text(response_wait_text), reply_markup=None)
        except TelegramError as e:
            if "Message is not modified" not in str(e) and "message to edit not found" not in str(e).lower():
                logger.error(f"–û—à–∏–±–∫–∞ edit_message_text –≤ process_final_confirmation: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
                sent_confirmation_msg = await query.message.reply_text(text=clean_text(response_wait_text))
            elif "message to edit not found" in str(e).lower():
                sent_confirmation_msg = await query.message.reply_text(text=clean_text(response_wait_text))
            else:
                sent_confirmation_msg = query.message
    else:
        sent_confirmation_msg = await query.message.reply_text(text=clean_text(response_wait_text))

    if sent_confirmation_msg:
        try:
            await context.bot.set_message_reaction(
                chat_id=sent_confirmation_msg.chat_id, message_id=sent_confirmation_msg.message_id,
                reaction=[ReactionTypeEmoji("‚ö°")])
        except Exception as e_react:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_confirmation_msg.message_id}: {e_react}")

    input_for_gpt = ""
    system_prompt_template = ""
    user_prompt_template_str = ""
    max_tokens_val = 0
    confirm_text_on_error = ""
    next_confirm_state_on_error = ConversationHandler.END

    if service_type == "tarot":
        input_for_gpt = (
            f"–û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è: {user_data.get('tarot_main_person_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data.get('tarot_main_person_dob', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: {user_data.get('tarot_backstory', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–î—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {user_data.get('tarot_other_people', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í–æ–ø—Ä–æ—Å—ã –∫ –∫–∞—Ä—Ç–∞–º: {user_data.get('tarot_questions', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        system_prompt_template = PROMPT_TAROT_SYSTEM
        user_prompt_template_str = "–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∑–∞–ø—Ä–æ—Å: {input_text}"
        max_tokens_val = CONFIG["OPENAI_MAX_TOKENS_TAROT"]
        confirm_text_on_error = "–î–∞–Ω–Ω—ã–µ –¥–ª—è –¢–∞—Ä–æ (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏):"
        next_confirm_state_on_error = SHOW_TAROT_CONFIRM_OPTIONS
    elif service_type == "matrix":
        input_for_gpt = (
            f"–ò–º—è: {user_data.get('matrix_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data.get('matrix_dob', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        system_prompt_template = PROMPT_MATRIX_SYSTEM
        user_prompt_template_str = "–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: {input_text}"
        max_tokens_val = CONFIG["OPENAI_MAX_TOKENS_MATRIX"]
        confirm_text_on_error = CONFIRM_DETAILS_MATRIX_TEXT.format(
            name=user_data.get('matrix_name', '?'), dob=user_data.get('matrix_dob', '?'))
        next_confirm_state_on_error = CONFIRM_MATRIX_DATA

    final_user_prompt = user_prompt_template_str.format(input_text=input_for_gpt)
    result = await ask_gpt(system_prompt_template, final_user_prompt, max_tokens_val, context, user_id)

    if result is None:
        await query.message.reply_text(clean_text(OPENAI_ERROR_MESSAGE))

        keyboard_retry_callback_data = f"confirm_final_{service_type}"
        keyboard_retry_buttons = [[InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=keyboard_retry_callback_data)],
                                  [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=CANCEL_CALLBACK_DATA)]]

        if service_type == "tarot":
            keyboard_retry_buttons = get_tarot_edit_keyboard().inline_keyboard
            confirm_text_on_error = clean_text(CONFIRM_DETAILS_TAROT_TEXT_DISPLAY.format(
                main_person_name=user_data.get('tarot_main_person_name', '?'),
                main_person_dob=user_data.get('tarot_main_person_dob', '?'),
                backstory=user_data.get('tarot_backstory', '?'),
                other_people=user_data.get('tarot_other_people', '?'),
                questions=user_data.get('tarot_questions', '?'))) + "\n\n" + clean_text(EDIT_CHOICE_TEXT)

        try:
            await query.message.reply_text(text=confirm_text_on_error, reply_markup=InlineKeyboardMarkup(keyboard_retry_buttons))
        except Exception as e_reply:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ OpenAI: {e_reply}")

        return next_confirm_state_on_error

    job_payload = {"user_id": user_id, "result": result, "service_type": service_type, "user_name_for_log": user_name_for_log}
    context.job_queue.run_once(main_service_job, CONFIG["DELAY_SECONDS_MAIN_SERVICE"], data=job_payload, name=f"main_job_{user_id}")

    logger.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name_for_log} ({user_id}) ({service_type}) –ø—Ä–∏–Ω—è—Ç–∞ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
    await send_admin_notification(context, f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {user_name_for_log} (ID: {user_id}) –Ω–∞ {service_type}. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
    if user_data: user_data.clear()
    return ConversationHandler.END

async def confirm_matrix_data_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await process_final_confirmation(update, context, "matrix")

async def confirm_tarot_data_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await process_final_confirmation(update, context, "tarot")

async def common_cancel_logic(update: Update, context: ContextTypes.DEFAULT_TYPE, query: Optional[CallbackQuery] = None) -> int:
    user_data = context.user_data
    if user_data:
        user_data.clear()

    cancel_message_text = clean_text(CANCEL_TEXT)

    chat_to_reply = None
    message_to_handle = query.message if query else update.message

    if message_to_handle:
        chat_to_reply = message_to_handle.chat
        try:
            if query:
                await query.edit_message_text(text=cancel_message_text, reply_markup=None)
            else:
                await message_to_handle.reply_text(text=cancel_message_text)
        except TelegramError as e:
            if "Message is not modified" not in str(e) and "message to edit not found" not in str(e).lower():
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
                if chat_to_reply:
                    await context.bot.send_message(chat_id=chat_to_reply.id, text=cancel_message_text)
            elif "message to edit not found" in str(e).lower():
                if chat_to_reply:
                    await context.bot.send_message(chat_id=chat_to_reply.id, text=cancel_message_text)
    elif query:
        chat_to_reply = await context.bot.get_chat(query.from_user.id)
        await context.bot.send_message(chat_id=query.from_user.id, text=cancel_message_text)

    if chat_to_reply:
        try:
            await context.bot.send_message(chat_id=chat_to_reply.id, text=clean_text(WELCOME_TEXT), reply_markup=get_main_menu_keyboard())
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å WELCOME_TEXT –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: {e}")

    return CHOOSE_SERVICE

async def cancel_conv_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id if update.effective_user else "Unknown"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
    return await common_cancel_logic(update, context)

async def cancel_conv_inline_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É.")
    return await common_cancel_logic(update, context, query=query)

async def handle_satisfaction_and_other_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data: return
    await query.answer()
    user_id = query.from_user.id

    if query.data.startswith("satisfaction_"):
        parts = query.data.split("_")
        answer = parts[1]
        service_type = parts[2] if len(parts) > 2 else "—É—Å–ª—É–≥—É"

        original_message_text = query.message.text if query.message else clean_text(SATISFACTION_PROMPT_TEXT.format(service_type_rus="–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"))

        if answer == "yes":
            detailed_feedback_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëç –û—á–µ–Ω—å —Ç–æ—á–Ω–æ!", callback_data=f"detailed_fb_accurate_{service_type}")],
                [InlineKeyboardButton("üëå –ü–æ–ª–µ–∑–Ω–æ, –Ω–æ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data=f"detailed_fb_useful_qs_{service_type}")],
                [InlineKeyboardButton("üôÇ –û–±—â–∏–µ –º–æ–º–µ–Ω—Ç—ã —Å–æ–≤–ø–∞–ª–∏", callback_data=f"detailed_fb_general_{service_type}")],
                [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ—Å—Ç–æ —Å–ø–∞—Å–∏–±–æ (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)", callback_data=f"detailed_fb_skip_{service_type}")],
            ])
            try:
                await query.edit_message_text(
                    text=f"{original_message_text}\n\n{clean_text(DETAILED_FEEDBACK_PROMPT_TEXT)}",
                    reply_markup=detailed_feedback_keyboard)
            except TelegramError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞: {e}")
                await query.message.reply_text(text=clean_text(DETAILED_FEEDBACK_PROMPT_TEXT), reply_markup=detailed_feedback_keyboard)

        elif answer == "no":
            await query.edit_message_text(text=f"{original_message_text}\n\n{clean_text(NO_PROBLEM_TEXT)}", reply_markup=None)

    elif query.data.startswith("detailed_fb_"):
        feedback_parts = query.data.split("_")
        feedback_type = feedback_parts[2]
        service_type = feedback_parts[3] if len(feedback_parts) > 3 else "—É—Å–ª—É–≥—É"

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–∞–ª –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–¥–±–µ–∫: {feedback_type} –¥–ª—è {service_type}")

        thank_you_for_feedback_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∫–ª–∏–∫! –≠—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ."
        if feedback_type == "skip":
            thank_you_for_feedback_text = "–ü–æ–Ω–∏–º–∞—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞!"

        original_satisfaction_text_segment = ""
        if query.message and query.message.text:
            split_segments = query.message.text.split(clean_text(DETAILED_FEEDBACK_PROMPT_TEXT))
            if split_segments:
                original_satisfaction_text_segment = split_segments[0].strip()

        final_text_after_detailed_fb = f"{original_satisfaction_text_segment}\n\n{thank_you_for_feedback_text}".strip()

        try:
            await query.edit_message_text(text=final_text_after_detailed_fb, reply_markup=None)
        except TelegramError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞: {e}")
            await query.message.reply_text(thank_you_for_feedback_text)

        if feedback_type != "skip":
            await query.message.reply_text(clean_text(REVIEW_PROMISE_TEXT))
            job_payload = {"user_id": user_id, "service_type": service_type}
            context.job_queue.run_once(review_request_job, CONFIG["DELAY_SECONDS_REVIEW_REQUEST"], data=job_payload, name=f"review_req_job_{user_id}")
            logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –¥–ª—è {user_id} —á–µ—Ä–µ–∑ {CONFIG['DELAY_SECONDS_REVIEW_REQUEST']} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞ '{feedback_type}'.")