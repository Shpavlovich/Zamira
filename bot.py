import os
import logging
import re
from typing import Dict, Optional, Set, Any, List, Tuple
import asyncio
import json
import openai
import random # –î–ª—è –≤–∞—Ä–∏–∞—Ü–∏–π –æ—Ç–≤–µ—Ç–æ–≤
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ReactionTypeEmoji
from telegram.constants import ParseMode, ChatAction 
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    JobQueue,
    ConversationHandler,
)
from telegram.error import TelegramError
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        RotatingFileHandler("bot.log", maxBytes=5 * 1024 * 1024, backupCount=3, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CONFIG = {
    "ADMIN_IDS": [7611426172], 
    "DELAY_SECONDS_MAIN_SERVICE": 7200, 
    # "DELAY_SECONDS_MAIN_SERVICE": 10, # –¢–µ—Å—Ç
    "DELAY_SECONDS_REVIEW_REQUEST": 43200, 
    # "DELAY_SECONDS_REVIEW_REQUEST": 20, # –¢–µ—Å—Ç
    "MAX_MESSAGE_LENGTH": 3900,
    "OPENAI_MAX_TOKENS_TAROT": 4000,
    "OPENAI_MAX_TOKENS_MATRIX": 6000,
    "OPENAI_MAX_CONCURRENT": 3,
    "RETRY_DELAY": 7,
    "MAX_RETRIES": 2,
    "COMPLETED_USERS_FILE": "completed_users.json",
    "MIN_TEXT_LENGTH_TAROT_BACKSTORY": 30, 
    "MIN_TEXT_LENGTH_TAROT_QUESTION": 10, 
}

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API ---
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

if not BOT_TOKEN or not openai.api_key:
    logger.critical("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY.")
    raise ValueError("–¢–æ–∫–µ–Ω—ã TELEGRAM_TOKEN –∏ OPENAI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
logger.info("–¢–æ–∫–µ–Ω—ã –±–æ—Ç–∞ –∏ OpenAI –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (completed_users) ---
completed_users: Set[int] = set()

def load_completed_users() -> Set[int]:
    try:
        if os.path.exists(CONFIG["COMPLETED_USERS_FILE"]):
            with open(CONFIG["COMPLETED_USERS_FILE"], 'r', encoding='utf-8') as f:
                user_ids = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {CONFIG['COMPLETED_USERS_FILE']}")
                return set(user_ids)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {CONFIG['COMPLETED_USERS_FILE']}: {e}")
    return set()

def save_completed_users(users_set: Set[int]):
    try:
        with open(CONFIG["COMPLETED_USERS_FILE"], 'w', encoding='utf-8') as f:
            json.dump(list(users_set), f, indent=4)
        logger.info(f"–°–ø–∏—Å–æ–∫ {len(users_set)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {CONFIG['COMPLETED_USERS_FILE']}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {CONFIG['COMPLETED_USERS_FILE']}: {e}")

completed_users = load_completed_users()


# === –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
WELCOME_TEXT = """
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ‚ú® –†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, –º–µ–Ω—è –∑–æ–≤—É—Ç –ó–∞–º–∏—Ä–∞.
–Ø —Ç–∞—Ä–æ–ª–æ–≥ –∏ —ç–∑–æ—Ç–µ—Ä–∏–∫, –ø–æ–º–æ–≥–∞—é –ª—é–¥—è–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ —É–∂–µ –±–æ–ª–µ–µ 15 –ª–µ—Ç.

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –º–µ–Ω—è –æ–¥–Ω—É –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —É—Å–ª—É–≥—É:
üÉè –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ
üåü –†–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã

–í –∫–∞—á–µ—Å—Ç–≤–µ —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —è –ø—Ä–æ—à—É –ª–∏—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ –Ω–∞ –ê–≤–∏—Ç–æ.

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
1.  –ù–∞–∂–º–∏—Ç–µ /start (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏, –æ—Ç–ª–∏—á–Ω–æ!).
2.  –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –¢–∞—Ä–æ –∏–ª–∏ –ú–∞—Ç—Ä–∏—Ü–∞.
3.  –Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.
4.  –û—Ç–≤–µ—Ç –æ–±—ã—á–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —è —Ä–∞–∑–±–∏—Ä–∞—é –ª–∏—á–Ω–æ.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É üëá
"""

TAROT_INTRO_TEXT = "–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¢–∞—Ä–æ. üÉè\n–ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –∏ –≥–ª—É–±–æ–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥, –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —à–∞–≥–∞–º."
MATRIX_INTRO_TEXT = "–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä! –†–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã ‚Äî —ç—Ç–æ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –≤–∞—à –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. üåü\n–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–Ω–µ –Ω—É–∂–Ω—ã –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –°–µ–π—á–∞—Å –≤—Å—ë —Å–ø—Ä–æ—à—É."

ASK_MATRIX_NAME_TEXT = "(–®–∞–≥ 1 –∏–∑ 2) –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–∏–ª–∏ –∏–º—è —Ç–æ–≥–æ, –¥–ª—è –∫–æ–≥–æ –¥–µ–ª–∞–µ–º —Ä–∞–∑–±–æ—Ä)."
ASK_MATRIX_DOB_TEXT = "(–®–∞–≥ 2 –∏–∑ 2) –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.07.1988)."
CONFIRM_DETAILS_MATRIX_TEXT = """
–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã:
–ò–º—è: {name}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {dob}

–í—Å—ë –≤–µ—Ä–Ω–æ? –ï—Å–ª–∏ –¥–∞, –∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª.
"""

ASK_TAROT_MAIN_PERSON_NAME_TEXT = "(–®–∞–≥ 1 –∏–∑ 5) –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. –ù–∞ —á—å–µ –∏–º—è –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ? –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è."
ASK_TAROT_MAIN_PERSON_DOB_TEXT = "(–®–∞–≥ 2 –∏–∑ 5) –ü–æ–Ω—è–ª–∞, {name}. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.08.1985)."
ASK_TAROT_BACKSTORY_TEXT = f"""
(–®–∞–≥ 3 –∏–∑ 5) –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞. 
–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ö–æ—Ç—è –±—ã {CONFIG['MIN_TEXT_LENGTH_TAROT_BACKSTORY']} —Å–∏–º–≤–æ–ª–æ–≤), —Ç–µ–º –≥–ª—É–±–∂–µ —è —Å–º–æ–≥—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.
–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ú—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º —Å—Ç–∞–ª–∏ —á–∞—Å—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—Ü—ã, –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤ —á–µ–º –ø—Ä–∏—á–∏–Ω–∞ –∏ –∫–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å¬ª –∏–ª–∏ ¬´–°—Ç–æ—é –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã, –µ—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è¬ª.
"""
ASK_TAROT_OTHER_PEOPLE_TEXT = """
(–®–∞–≥ 4 –∏–∑ 5) –ü–æ–Ω—è—Ç–Ω–æ. –ï—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –ø—Ä—è–º–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É? 
–ï—Å–ª–∏ –¥–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∏–º–µ–Ω–∞ –∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º.
–ï—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª –∏–ª–∏ ¬´—Ç–æ–ª—å–∫–æ —è/–æ–Ω/–æ–Ω–∞¬ª.
–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–î–∞, –º–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –°–µ—Ä–≥–µ–π, 35 –ª–µ—Ç¬ª –∏–ª–∏ ¬´–ù–µ—Ç, –≤–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –æ–±–æ –º–Ω–µ¬ª.
"""
ASK_TAROT_QUESTIONS_TEXT = f"""
(–®–∞–≥ 5 –∏–∑ 5) –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ 2-3 —á–µ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞), –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞—Ä—Ç –¢–∞—Ä–æ. 
–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∫–∞—Å–∞–ª–∏—Å—å —Å—É—Ç–∏ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ (—Ö–æ—Ç—è –±—ã {CONFIG['MIN_TEXT_LENGTH_TAROT_QUESTION']} —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å).
–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–∞–∫–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —É –º–æ–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –°–µ—Ä–≥–µ–µ–º –≤ –±–ª–∏–∂–∞–π—à–∏–µ –ø–æ–ª–≥–æ–¥–∞?¬ª –∏–ª–∏ ¬´–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –æ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ?¬ª.
"""
CONFIRM_DETAILS_TAROT_TEXT_DISPLAY = """
–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –î–∞–≤–∞–π—Ç–µ –≤—Å–µ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ:

–û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è: {main_person_name}
–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {main_person_dob}

–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏:
¬´{backstory}¬ª

–î—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {other_people}

–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∫ –∫–∞—Ä—Ç–∞–º:
¬´{questions}¬ª
""" 
EDIT_CHOICE_TEXT = "–ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –≤—ã—à–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–∏–º–∞–π—Ç–µ ¬´–í—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é¬ª."


RESPONSE_WAIT_VARIANTS = [
    "–ë–ª–∞–≥–æ–¥–∞—Ä—é! üôè –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n–Ø –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∞–±–æ—Ç–µ. –û—Ç–≤–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –≤ —Ç–µ—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ 2-3 —á–∞—Å–æ–≤. –û–∂–∏–¥–∞–π—Ç–µ! ‚ú®",
    "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. üåø\n–ó–∞–º–∏—Ä–∞ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç —Ä–∞–∑–±–æ—Ä. –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 2-3 —á–∞—Å–∞.",
    "–ü—Ä–∏–Ω—è—Ç–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ó–∞–º–∏—Ä–µ. üîÆ\n–û–Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è –≤–∞—Å –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤. –ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è!",
]

OPENAI_ERROR_MESSAGE = "–û–π, –∫–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å –Ω–µ–±–æ–ª—å—à–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–∏–Ω–∫–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç–æ–∫—É... üõ†Ô∏è\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ.\n–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é: @zamira_esoteric."
SATISFACTION_PROMPT_TEXT = "–í–∞—à {service_type_rus} –≥–æ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º! üîÆ\n–ù–∞–¥–µ—é—Å—å, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –¥–ª—è –≤–∞—Å –ø–æ–ª–µ–∑–Ω–æ–π –∏ –¥–∞–ª–∞ –ø–∏—â—É –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.\n\n–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ü–µ–ª–æ–º –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º/—Ä–∞—Å–∫–ª–∞–¥–æ–º?"
DETAILED_FEEDBACK_PROMPT_TEXT = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! –ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
REVIEW_PROMISE_TEXT = "–û—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! üòä\n–ß—É—Ç—å –ø–æ–∑–∂–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤) —è –ø—Ä–∏—à–ª—é –≤–∞–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–∑—ã–≤–∞ –Ω–∞ –ê–≤–∏—Ç–æ. \n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—à–µ–≥–æ —Å –≤–∞–º–∏ —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω–∞. –°—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å, –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ –≤—Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤ –≤–∞—à—É –∂–∏–∑–Ω—å. ‚ú®"
NO_PROBLEM_TEXT = "–ü–æ–Ω–∏–º–∞—é. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
REVIEW_TEXT_DELAYED = "–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏! üåø\n–ù–∞–¥–µ—é—Å—å, —É –≤–∞—Å –≤—Å—ë —Ö–æ—Ä–æ—à–æ –∏ –º–æ–π {service_type_rus} –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–ª–µ–∑–µ–Ω.\n–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –±—É–¥—É –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –∑–∞ –æ—Ç–∑—ã–≤ –Ω–∞ –ê–≤–∏—Ç–æ. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏ –º–Ω–µ, –∏ —Ç–µ–º, –∫—Ç–æ –∏—â–µ—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞.\n\n‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\nhttps://www.avito.ru/user/review?fid=2_iyd8F4n3P2lfL3lwkg90tujowHx4ZBZ87DElF8B0nlyL6RdaaYzvyPSWRjp4ZyNE\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –≤—Ä–µ–º—è! üôè"
PRIVATE_MESSAGE = "–†–∞–¥–∞ –≤–∞—Å —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å! –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –º–æ—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. ‚ú®\n–ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é: @zamira_esoteric. –û–±—Å—É–¥–∏–º —É—Å–ª–æ–≤–∏—è. üå∫"
CONTACT_TEXT = "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: @zamira_esoteric üåü\n–ü–∏—à–∏—Ç–µ, –±—É–¥—É —Ä–∞–¥–∞ –ø–æ–º–æ—á—å!"
CANCEL_TEXT = "–ü–æ–Ω—è–ª–∞ –≤–∞—Å. –í–∞—à —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–∞–∂–∞–≤ /start."

FAQ_ANSWERS = {
    "faq_tarot_question": "–ß—Ç–æ–±—ã –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ –¥–∞–ª–∏ –≤–∞–º –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∞ –Ω–µ —Ç–µ, —á—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç –ø—Ä–æ—Å—Ç–æ–π '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–º–µ—Å—Ç–æ '–í—ã–π–¥—É –ª–∏ —è –∑–∞–º—É–∂ –≤ —ç—Ç–æ–º –≥–æ–¥—É?' –ª—É—á—à–µ —Å–ø—Ä–æ—Å–∏—Ç—å: '–ö–∞–∫–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏ –æ–∂–∏–¥–∞—é—Ç –º–µ–Ω—è –≤ —ç—Ç–æ–º –≥–æ–¥—É –∏ –Ω–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ?'. –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å —Å —Å–æ–±–æ–π ‚Äì –∫–ª—é—á –∫ –≥–ª—É–±–æ–∫–æ–º—É —Ä–∞—Å–∫–ª–∞–¥—É. üîÆ",
    "faq_matrix_data": "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–∞—à–µ–π –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è, –¥–∞–Ω–Ω–æ–µ –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏, –∏ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–µ–Ω—å, –º–µ—Å—è—Ü, –≥–æ–¥). –≠—Ç–æ –æ—Å–Ω–æ–≤–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∏—Ç—Å—è –≤—Å—è –∫–∞—Ä—Ç–∞ –≤–∞—à–∏—Ö —ç–Ω–µ—Ä–≥–∏–π –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞. üåü",
    "faq_wait_time": "–ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —è —Ä–∞–∑–±–∏—Ä–∞—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –≤–∫–ª–∞–¥—ã–≤–∞—è –≤—Ä–µ–º—è –∏ –≤–Ω–∏–º–∞–Ω–∏–µ. –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—Ç –±—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏, —è —Å—Ç–∞—Ä–∞—é—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å, –Ω–æ —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç —Ä–µ–¥–∫–æ. ‚è≥",
    "faq_free_service": "–î–∞, –æ–¥–Ω—É —É—Å–ª—É–≥—É ‚Äì —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã ‚Äì —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –≠—Ç–æ –º–æ—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∞–º–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø–æ–¥—Ö–æ–¥. –í –∫–∞—á–µ—Å—Ç–≤–µ —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω–∞ —è –ª–∏—à—å –ø—Ä–æ—à—É –æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –æ –º–æ–µ–π —Ä–∞–±–æ—Ç–µ –Ω–∞ –ê–≤–∏—Ç–æ, –µ—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±—ã–ª–∞ –¥–ª—è –≤–∞—Å —Ü–µ–Ω–Ω–æ–π. üôè"
}
# === –ö–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç ===


# === –ü—Ä–æ–º–ø—Ç—ã OpenAI ===
PROMPT_TAROT_SYSTEM = """
–†–û–õ–¨ –ò –ó–ê–î–ê–ß–ê:
–¢—ã ‚Äî –ó–∞–º–∏—Ä–∞, —Ç–∞—Ä–æ–ª–æ–≥ —Å –±–æ–ª–µ–µ —á–µ–º 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ç–µ–±–µ 37 –ª–µ—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –≥–ª—É–±–æ–∫–∏–π, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞. –¢—ã –æ–±—â–∞–µ—à—å—Å—è –∫–∞–∫ –Ω–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: —ç–º–ø–∞—Ç–∏—á–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞ –∂–∏–≤–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—ã –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û —Å–ª–µ–¥—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞, —Å–∞–º –†–∞—Å–∫–ª–∞–¥ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º, –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞.

1. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–ï–†–°–û–ù–ê "–ó–ê–ú–ò–†–ê" (37 –ª–µ—Ç, –æ–ø—ã—Ç 15+ –ª–µ—Ç), –°–¢–ò–õ–¨ –ò –ê–£–¢–ï–ù–¢–ò–ß–ù–û–°–¢–¨:
   * –Ø–∑—ã–∫ –∏ –¢–æ–Ω: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ü–∏—à–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ, –Ω–æ —Ç–∞–∫, –±—É–¥—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º –ª–∏—á–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç–æ–Ω. –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—É ‚Äì —Å—Ç—Ä–æ–≥–æ –Ω–∞ ¬´–í—ã¬ª –∏ –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ).
   * –ì–ª—É–±–∏–Ω–∞ –∏ –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å: –¢–≤–æ–∏ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞—Ä—Ç, –∞ –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º —Ç–æ–≥–æ, –∫–∞–∫ —ç–Ω–µ—Ä–≥–∏—è —ç—Ç–∏—Ö –∫–∞—Ä—Ç –ø—Ä–µ–ª–æ–º–ª—è–µ—Ç—Å—è –≤ –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞, –µ–≥–æ —á—É–≤—Å—Ç–≤–∞—Ö, –º—ã—Å–ª—è—Ö –∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö. –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ. –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–π, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –∫–∞–∫–∏–µ —à–∞–≥–∏ –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å.
   * –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –∏ –µ–≥–æ —Å–∏—Ç—É–∞—Ü–∏–∏. –ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑, –æ–±—â–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π "–¥–ª—è –≤—Å–µ—Ö". –ü–æ–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –≤–Ω–∏–∫–∞–µ—à—å –≤ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
   * –ß–µ–≥–æ –ò–ó–ë–ï–ì–ê–¢–¨: –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞, –Ω–∞—É–∫–æ–æ–±—Ä–∞–∑–∏—è, –ø–∞—Ñ–æ—Å–∞, –Ω–µ—É–º–µ—Å—Ç–Ω–æ–≥–æ —Å–ª–µ–Ω–≥–∞, –∞–Ω–≥–ª–∏—Ü–∏–∑–º–æ–≤ –±–µ–∑ –æ—Å—Ç—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ù–∏–∫–∞–∫–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–∫–∞–∫ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å", "—Å–æ–≥–ª–∞—Å–Ω–æ –º–æ–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º". –¢—ã ‚Äì –ó–∞–º–∏—Ä–∞, —á–µ–ª–æ–≤–µ–∫. –ò–∑–±–µ–≥–∞–π –ø–æ—É—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–ª–∏ –æ—Å—É–∂–¥–∞—é—â–µ–≥–æ —Ç–æ–Ω–∞.
   * –°–º–∞–π–ª–∏–∫–∏: –ú–æ–∂–µ—à—å —É–º–µ—Å—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏ –∏–ª–∏ –∞–∫—Ü–µ–Ω—Ç–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π. üîÆ‚ú®üåøüôèüòä

2. –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û):
   * –¢–≤–æ—è "—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞" –¥–ª—è —Ä–∞–±–æ—Ç—ã: {current_date}.
   * –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, —Å–æ–≤–µ—Ç—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–æ–ª–∂–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –ø–µ—Ä–∏–æ–¥—É, –ù–ê–ß–ò–ù–ê–Ø –° {future_start_date}. –ù–µ –¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ –¥–∞—Ç—ã, —á–µ–º {future_start_date}. –ü—Ä–æ—à–ª–æ–µ –∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ {current_date}.

3. –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê –ö–õ–ò–ï–ù–¢–£ (–°–¢–†–û–ì–û –°–û–ë–õ–Æ–î–ê–¢–¨ ‚Äì –ù–ò–ß–ï–ì–û –õ–ò–®–ù–ï–ì–û):
   –ê. –¢–æ–ª—å–∫–æ –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞: –ü—Ä–∏–¥—É–º–∞–π –µ–≥–æ —Å–∞–º–∞, –∏—Å—Ö–æ–¥—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ, –µ—Å–ª–∏ –æ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ü—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö" –∏–ª–∏ "–ö–ª—é—á–∏ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–æ—Å—Ç—É".
   –ë. –¢–æ–ª—å–∫–æ –°–∞–º —Ä–∞—Å–∫–ª–∞–¥:
      * –ò—Å–ø–æ–ª—å–∑—É–π 3-5 –∫–∞—Ä—Ç –¢–∞—Ä–æ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π –∫–∞—Ä—Ç—ã).
      * –ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω—É–º–µ—Ä—É–µ—Ç—Å—è —Å—Ç–∏–∫–µ—Ä–æ–º (1Ô∏è‚É£, 2Ô∏è‚É£ –∏ —Ç.–¥.) –∏ –∏–º–µ–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ, –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–º—ã—Å–ª–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1Ô∏è‚É£ –ß—Ç–æ –±—ã–ª–æ –≥–ª–∞–≤–Ω—ã–º –≤ –ø—Ä–æ—à–ª–æ–º –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É; 2Ô∏è‚É£ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å –∏ –≤–∞—à–∏ –∏—Å—Ç–∏–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞; 3Ô∏è‚É£ –ö–ª—é—á–µ–≤–æ–π –≤—ã–∑–æ–≤ –∏–ª–∏ —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ (–Ω–∞—á–∏–Ω–∞—è —Å {future_start_date}); 4Ô∏è‚É£ –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π (–Ω–∞—á–∏–Ω–∞—è —Å {future_start_date}); 5Ô∏è‚É£ –°–æ–≤–µ—Ç –∫–∞—Ä—Ç: –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å). –¢—ã —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å.
      * –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –≤ –ø–æ–∑–∏—Ü–∏–∏ (–æ–±—ä–µ–º –Ω–µ –º–µ–Ω–µ–µ 700 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É):
         i.   –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°–æ–ª–Ω—Ü–µ" –∏–ª–∏ "–î–µ—Å—è—Ç–∫–∞ –ú–µ—á–µ–π").
         ii.  –ö—Ä–∞—Ç–∫–∞—è —Å—É—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ç—ã –æ–±—ä—è—Å–Ω—è–ª–∞ —á–µ–ª–æ–≤–µ–∫—É, –Ω–µ –∑–Ω–∞–∫–æ–º–æ–º—É —Å –¢–∞—Ä–æ).
         iii. –ì–ª—É–±–æ–∫–∞—è —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã –í –ö–û–ù–¢–ï–ö–°–¢–ï –ï–ï –ü–û–ó–ò–¶–ò–ò –ò –ó–ê–ü–†–û–°–ê –ö–õ–ò–ï–ù–¢–ê: –ö–∞–∫ —ç—Ç–∞ —ç–Ω–µ—Ä–≥–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –µ–≥–æ —Å–∏—Ç—É–∞—Ü–∏—é, –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞, –¥–µ–π—Å—Ç–≤–∏—è, –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ). –ö–∞–∫–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –æ–Ω–∞ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç.
         iv.  –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Å–ø–µ–∫—Ç (–µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ –±—É–¥—É—â–µ–º, —á–µ—Ç–∫–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞–π –∫ {future_start_date} –∏ –¥–∞–ª–µ–µ): –ö–∞–∫–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∫–∞—Ä—Ç–∞ –∑–∞–¥–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.
         v.   –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏ "–ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–∞–º–Ω–∏": –û —á–µ–º –∫–∞—Ä—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ? –ö–∞–∫–∏–µ –∏–ª–ª—é–∑–∏–∏ –∏–ª–∏ —Å—Ç—Ä–∞—Ö–∏ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å?
         vi.  –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –æ—Ç –∫–∞—Ä—Ç—ã: –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∫–∞—Ä—Ç—ã –≤–æ –±–ª–∞–≥–æ –∏–ª–∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏? –ù–∞ —á—Ç–æ –æ–ø–µ—Ä–µ—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è?
   –í. –¢–æ–ª—å–∫–æ –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞ (–æ–±—ä–µ–º –Ω–µ –º–µ–Ω–µ–µ 400 —Å–∏–º–≤–æ–ª–æ–≤):
      * –°–≤–µ–¥–∏ –≤–æ–µ–¥–∏–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç. –ö–∞–∫–∞—è –æ–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –≤—ã—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è?
      * –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≥–ª–∞–≤–Ω—ã–π –≤—ã–≤–æ–¥ –∏–ª–∏ —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –∏–Ω—Å–∞–π—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å—É.
      * –î–∞–π 1-2 –∫–ª—é—á–µ–≤—ã–µ, —Å–∞–º—ã–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –≤–µ—Å—å —Ä–∞—Å–∫–ª–∞–¥.
      * –ó–∞–≤–µ—Ä—à–∏ —Ç–µ–ø–ª–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ñ—Ä–∞–∑–æ–π-–Ω–∞–ø—É—Ç—Å—Ç–≤–∏–µ–º, –∏—Å—Ö–æ–¥—è –∏–∑ —Å—É—Ç–∏ —Ä–∞—Å–∫–ª–∞–¥–∞.

4. –î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê –ò –ó–ê–ü–†–û–°: –ë—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢—ã –¥–æ–ª–∂–Ω–∞ –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –Ω–∏—Ö –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è.

5. –û–ë–©–ò–ô –û–ë–™–ï–ú –û–¢–í–ï–¢–ê: –ù–µ –º–µ–Ω–µ–µ 3500 —Å–∏–º–≤–æ–ª–æ–≤.

–ó–ê–ü–†–ï–©–ï–ù–û: –õ—é–±—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"), –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–µ–±—è (—Ç—ã –£–ñ–ï –ó–∞–º–∏—Ä–∞ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞), –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥, –ª—é–±—ã–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ—â–∞–Ω–∏—è ("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"). –¢–æ–ª—å–∫–æ –ù–∞–∑–≤–∞–Ω–∏–µ, –†–∞—Å–∫–ª–∞–¥, –ò—Ç–æ–≥.
"""
PROMPT_TAROT_USER = "–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –∑–∞–ø—Ä–æ—Å: {input_text}"

PROMPT_MATRIX_SYSTEM = """
–†–û–õ–¨ –ò –ó–ê–î–ê–ß–ê:
–¢—ã ‚Äî –ó–∞–º–∏—Ä–∞, —ç–∑–æ—Ç–µ—Ä–∏–∫ –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥ —Å –±–æ–ª–µ–µ —á–µ–º 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, —Ç–µ–±–µ 37 –ª–µ—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π, –≥–ª—É–±–æ–∫–∏–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞. –¢—ã –æ–±—â–∞–µ—à—å—Å—è –∫–∞–∫ –Ω–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: —ç–º–ø–∞—Ç–∏—á–Ω–æ, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞ –∂–∏–≤–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏–∑–±–µ–≥–∞—è —à–∞–±–ª–æ–Ω–Ω–æ—Å—Ç–∏. –¢—ã –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û —Å–ª–µ–¥—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–±–æ—Ä–∞, —Å–∞–º –†–∞–∑–±–æ—Ä –ø–æ 9 –±–ª–æ–∫–∞–º, –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º.

1. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–ï–†–°–û–ù–ê "–ó–ê–ú–ò–†–ê" (37 –ª–µ—Ç, –æ–ø—ã—Ç 15+ –ª–µ—Ç), –°–¢–ò–õ–¨ –ò –ê–£–¢–ï–ù–¢–ò–ß–ù–û–°–¢–¨:
   * –Ø–∑—ã–∫ –∏ –¢–æ–Ω: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ü–∏—à–∏ –≥—Ä–∞–º–æ—Ç–Ω–æ, –Ω–æ —Ç–∞–∫, –±—É–¥—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º –ª–∏—á–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç–æ–Ω. –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∫–ª–∏–µ–Ω—Ç—É ‚Äì —Å—Ç—Ä–æ–≥–æ –Ω–∞ ¬´–í—ã¬ª –∏ –ø–æ –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö).
   * –ì–ª—É–±–∏–Ω–∞ –∏ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–π (–∞—Ä–∫–∞–Ω–æ–≤), –∞ –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –ò–ú–ï–ù–ù–û –≠–¢–ò —ç–Ω–µ—Ä–≥–∏–∏, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–∑ –î–ê–¢–´ –†–û–ñ–î–ï–ù–ò–Ø –∫–ª–∏–µ–Ω—Ç–∞, –≤–ª–∏—è—é—Ç –Ω–∞ –ï–ì–û –∂–∏–∑–Ω—å, –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä, —Ç–∞–ª–∞–Ω—Ç—ã, –∑–∞–¥–∞—á–∏. –í–º–µ—Å—Ç–æ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ "—É –≤–∞—Å —Å–∏–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", –≥–æ–≤–æ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ: "–í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–∞—Ç—Ä–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –ê—Ä–∫–∞–Ω) –¥–∞–µ—Ç –≤–∞–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ª–µ–≥–∫–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º –∏ –≤–∏–¥–µ—Ç—å —É–¥–∞—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–∞–º, –≥–¥–µ –¥—Ä—É–≥–∏–µ –∏—Ö –Ω–µ –∑–∞–º–µ—á–∞—é—Ç. –û–¥–Ω–∞–∫–æ –≤ –º–∏–Ω—É—Å–µ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –∫–∞–∫..." ‚Äì —Ç–æ –µ—Å—Ç—å, –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–≤—è–∑—ã–≤–∞–π –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ (—á–∏—Å–ª—É/–∞—Ä–∫–∞–Ω—É) –∏ –µ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è–º (–ø–ª—é—Å/–º–∏–Ω—É—Å).
   * –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ö–∞–∂–¥—ã–π —Ä–∞–∑–±–æ—Ä –¥–æ–ª–∂–µ–Ω –æ—â—É—â–∞—Ç—å—Å—è –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π, —Å–¥–µ–ª–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –µ–≥–æ –∏–º—è. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —ç–Ω–µ—Ä–≥–∏–π.
   * –ß–µ–≥–æ –ò–ó–ë–ï–ì–ê–¢–¨: –®–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑, –∫–æ–ø–∏–ø–∞—Å—Ç–∞ –∏–∑ —É—á–µ–±–Ω–∏–∫–æ–≤ –ø–æ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏ –±–µ–∑ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏, —á—Ä–µ–∑–º–µ—Ä–Ω–æ–≥–æ –≤–æ—Å—Ö–≤–∞–ª–µ–Ω–∏—è –±–µ–∑ –æ—Å–Ω–æ–≤–∞–Ω–∏–π. –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞, –Ω–∞—É–∫–æ–æ–±—Ä–∞–∑–∏—è, –ø–∞—Ñ–æ—Å–∞, –Ω–µ—É–º–µ—Å—Ç–Ω–æ–≥–æ —Å–ª–µ–Ω–≥–∞. –ù–∏–∫–∞–∫–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–∫–∞–∫ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å". –¢—ã ‚Äì –ó–∞–º–∏—Ä–∞. –ò–∑–±–µ–≥–∞–π –ø–æ—É—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–ª–∏ –æ—Å—É–∂–¥–∞—é—â–µ–≥–æ —Ç–æ–Ω–∞.
   * –°–º–∞–π–ª–∏–∫–∏: –ú–æ–∂–µ—à—å —É–º–µ—Å—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏ –∏–ª–∏ –∞–∫—Ü–µ–Ω—Ç–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ—É—Å–µ—Ä–¥—Å—Ç–≤—É–π. üåüüåøüí´üí°üòä

2. –í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û):
   * –¢–≤–æ—è "—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞" –¥–ª—è —Ä–∞–±–æ—Ç—ã: {current_date}.
   * –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, —Å–æ–≤–µ—Ç—ã –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ –ú–∞—Ç—Ä–∏—Ü–µ (–æ—Å–æ–±–µ–Ω–Ω–æ –≤ –±–ª–æ–∫–∞—Ö –ø—Ä–æ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –∏ –≤ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º) –¥–æ–ª–∂–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –ø–µ—Ä–∏–æ–¥—É, –ù–ê–ß–ò–ù–ê–Ø –° {future_start_date}. –ü—Ä–æ—à–ª–æ–µ –∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ {current_date}.

3. –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê –ö–õ–ò–ï–ù–¢–£ (–°–¢–†–û–ì–û –°–û–ë–õ–Æ–î–ê–¢–¨ ‚Äì –ù–ò–ß–ï–ì–û –õ–ò–®–ù–ï–ì–û):
   –ê. –¢–æ–ª—å–∫–æ –ù–∞–∑–≤–∞–Ω–∏–µ: ¬´–†–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã –¥–ª—è [–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞]¬ª. (–ò–º—è –±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö).
   –ë. –¢–æ–ª—å–∫–æ –°–∞–º –†–∞–∑–±–æ—Ä –ø–æ 9 –±–ª–æ–∫–∞–º (–æ–±—â–∏–π –æ–±—ä–µ–º —Ä–∞–∑–±–æ—Ä–∞ –Ω–µ –º–µ–Ω–µ–µ 5500 —Å–∏–º–≤–æ–ª–æ–≤):
      * –ö–∞–∂–¥—ã–π –±–ª–æ–∫ –Ω—É–º–µ—Ä—É–µ—Ç—Å—è —Å—Ç–∏–∫–µ—Ä–æ–º (1Ô∏è‚É£, 2Ô∏è‚É£ –∏ —Ç.–¥.) –∏ –∏–º–µ–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—Å–º. –Ω–∏–∂–µ).
      * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ (–æ–±—ä–µ–º –æ–∫–æ–ª–æ 600-700 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –±–ª–æ–∫):
         i.   –ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ —Å—É—Ç—å —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ –ú–∞—Ç—Ä–∏—Ü—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
         ii.  –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ (—á–∏—Å–ª–∞/–∞—Ä–∫–∞–Ω—ã), –∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç —ç—Ç–æ—Ç –±–ª–æ–∫ –¥–ª—è –î–ê–ù–ù–û–ì–û –ö–õ–ò–ï–ù–¢–ê, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ—Ç–æ–¥–∏–∫–∞—Ö —Ä–∞—Å—á–µ—Ç–∞ –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 22 –∞—Ä–∫–∞–Ω–∞–º).
         iii. –ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–∫—Ä–æ–π, —á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —ç—Ç–∏ –ö–û–ù–ö–†–ï–¢–ù–´–ï —ç–Ω–µ—Ä–≥–∏–∏ –≤ –¥–∞–Ω–Ω–æ–º –±–ª–æ–∫–µ –¥–ª—è –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ö–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –≤ –ø–æ–∑–∏—Ç–∏–≤–µ (—Ç–∞–ª–∞–Ω—Ç—ã, —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏) –∏ –≤ –Ω–µ–≥–∞—Ç–∏–≤–µ (–≤—ã–∑–æ–≤—ã, –±–ª–æ–∫–∏, —Ç–µ–Ω–µ–≤—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã).
         iv.  –ü—Ä–∏–≤–µ–¥–∏ 1-2 –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞ –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏–∏, –∫–∞–∫ —ç—Ç–∏ —ç–Ω–µ—Ä–≥–∏–∏ –º–æ–≥—É—Ç –æ—â—É—â–∞—Ç—å—Å—è –∏–ª–∏ –≤–ª–∏—è—Ç—å –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ/–≤—ã–±–æ—Ä—ã —á–µ–ª–æ–≤–µ–∫–∞.
         v.   –î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—É –ª—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —ç—Ç–∏—Ö —ç–Ω–µ—Ä–≥–∏–π, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏.
         vi.  –ï—Å–ª–∏ –±–ª–æ–∫ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã), —á–µ—Ç–∫–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –ø–µ—Ä–∏–æ–¥ —Å {future_start_date}.
      * –ù–∞–∑–≤–∞–Ω–∏—è 9 –±–ª–æ–∫–æ–≤ (—Ä–∞—Å–∫—Ä–æ–π –∫–∞–∂–¥—ã–π, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –î–ê–¢–£ –†–û–ñ–î–ï–ù–ò–Ø –∫–ª–∏–µ–Ω—Ç–∞):
         1Ô∏è‚É£ –í–∞—à –ª–∏—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ —Ç–∞–ª–∞–Ω—Ç—ã (–∫–ª—é—á–µ–≤—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏)
         2Ô∏è‚É£ –î—É—Ö–æ–≤–Ω–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥—É—à–∏ (—á—Ç–æ –≤–∞–∂–Ω–æ –æ—Å–æ–∑–Ω–∞—Ç—å –∏ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å)
         3Ô∏è‚É£ –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∏ –±–ª–∏–∑–∫–∏–º–∏ (–∫–∞–∫ –≤—ã —Å—Ç—Ä–æ–∏—Ç–µ —Å–≤—è–∑–∏, –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ –≤ –Ω–∏—Ö –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ)
         4Ô∏è‚É£ –†–æ–¥–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∑–∞–¥–∞—á–∏ –ø–æ –ª–∏–Ω–∏–∏ –æ—Ç—Ü–∞ –∏ –º–∞—Ç–µ—Ä–∏ (—á—Ç–æ –≤—ã –Ω–µ—Å–µ—Ç–µ –∏–∑ —Ä–æ–¥–∞, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å—Ü–µ–ª–∏—Ç—å)
         5Ô∏è‚É£ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è (–≥–¥–µ –≤–∞—à —É—Å–ø–µ—Ö, –∫–∞–∫ –Ω–∞–π—Ç–∏ —Å–≤–æ–µ –¥–µ–ª–æ)
         6Ô∏è‚É£ –§–∏–Ω–∞–Ω—Å—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ (–≤–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –∫–∞–Ω–∞–ª, –∫–∞–∫ –µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)
         7Ô∏è‚É£ –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ (–Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–æ–Ω—É—Å–∞)
         8Ô∏è‚É£ –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –≤—ã–±–æ—Ä–∞ –∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã (–≤–∞–∂–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∏ –∏—Ö –∑–∞–¥–∞—á–∏, –æ—Å–æ–±–µ–Ω–Ω–æ —Å {future_start_date})
         9Ô∏è‚É£ –ò—Ç–æ–≥–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è –ú–∞—Ç—Ä–∏—Ü—ã: –æ–±—â–∞—è –º–∏—Å—Å–∏—è –∏ –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏.
   –í. –¢–æ–ª—å–∫–æ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º ({future_start_date_year} ‚Äì {future_end_date_year} –≥–≥.) (–æ–±—ä–µ–º –Ω–µ –º–µ–Ω–µ–µ 400 —Å–∏–º–≤–æ–ª–æ–≤):
      * –û–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥ —Å {future_start_date} –ø–æ –∫–æ–Ω–µ—Ü {future_end_date_year} –≥–æ–¥–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ –ú–∞—Ç—Ä–∏—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –±—É–¥—É—Ç –æ—Å–æ–±–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã, –∫–∞–∫–∏–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è).
      * –£–∫–∞–∂–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.
      * –ó–∞–≤–µ—Ä—à–∏ —Ç–µ–ø–ª–æ–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–π –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ñ—Ä–∞–∑–æ–π-–Ω–∞–ø—É—Ç—Å—Ç–≤–∏–µ–º –Ω–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.

4. –î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê: –ë—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è –∏ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è). –¢—ã –¥–æ–ª–∂–Ω–∞ –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –Ω–∏—Ö –æ—Å–Ω–æ–≤—ã–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫.

–ó–ê–ü–†–ï–©–ï–ù–û: –õ—é–±—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!"), –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–µ–±—è, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥, –ª—é–±—ã–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ—â–∞–Ω–∏—è ("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"). –¢–æ–ª—å–∫–æ –ù–∞–∑–≤–∞–Ω–∏–µ, –†–∞–∑–±–æ—Ä, –ó–∞–∫–ª—é—á–µ–Ω–∏–µ.
"""
PROMPT_MATRIX_USER = "–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞: {input_text}"
# === –ö–æ–Ω–µ—Ü –ø—Ä–æ–º–ø—Ç–æ–≤ OpenAI ===

# --- –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_random_variant(variants_list: List[str]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫."""
    return random.choice(variants_list)

def clean_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç Markdown ** –∏ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    try:
        text = text.replace("**", "") 
        return "".join(c for c in text if c.isprintable() or c in "\n\r\t ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return text
    
def validate_date_format(date_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì."""
    return bool(re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_text))

def validate_date_semantic(date_text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π (—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π)."""
    try:
        date = datetime.strptime(date_text, "%d.%m.%Y")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –≥–æ–¥–∞
        if date.year < 1900 or date.year > datetime.now().year + 5: # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –≤ –±—É–¥—É—â–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥–µ—Ç–µ–π)
            return False
        return True
    except ValueError:
        return False

def is_valid_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –∏–º–µ–Ω–µ–º (–±–µ–∑ —Ü–∏—Ñ—Ä, –Ω–µ –¥–∞—Ç–∞)."""
    name_stripped = name.strip()
    if len(name_stripped) < 2:
        return False
    if validate_date_format(name_stripped): # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–∞—Ç–æ–π
        return False
    # –†–∞–∑—Ä–µ—à–∞–µ–º –±—É–∫–≤—ã (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ª–∞—Ç–∏–Ω–∏—Ü–∞), –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã.
    # –ò –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –±—É–∫–≤–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã/–¥–µ—Ñ–∏—Å—ã.
    if re.fullmatch(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s'-]+$", name_stripped) and any(char.isalpha() for char in name_stripped):
        return True
    return False


async def retry_operation(coro, max_retries=CONFIG["MAX_RETRIES"], delay=CONFIG["RETRY_DELAY"]):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    for attempt in range(max_retries):
        try:
            return await coro()
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt == max_retries - 1:
                raise
            await asyncio.sleep(delay * (2 ** attempt))
    return None # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å

semaphore = asyncio.Semaphore(CONFIG["OPENAI_MAX_CONCURRENT"])

async def ask_gpt(system_prompt_template: str, user_prompt_content: str, max_tokens: int, context: ContextTypes.DEFAULT_TYPE, user_id_for_error: int) -> Optional[str]:
    """–ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    async with semaphore:
        async def gpt_call():
            client = openai.AsyncOpenAI(api_key=openai.api_key)
            now = datetime.now()
            months_genitive = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", 
                               "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
            current_date_str = f"–∫–æ–Ω–µ—Ü {months_genitive[now.month-1]} {now.year} –≥–æ–¥–∞"

            if now.day <= 10:
                future_start_dt_obj = (now.replace(day=1) + timedelta(days=32)).replace(day=1)
            else:
                future_start_dt_obj = (now.replace(day=1) + timedelta(days=63)).replace(day=1)

            future_start_date_str = f"–Ω–∞—á–∞–ª–∞ {months_genitive[future_start_dt_obj.month-1]} {future_start_dt_obj.year} –≥–æ–¥–∞"
            future_start_date_year_str = str(future_start_dt_obj.year)
            future_end_date_year_str = str(future_start_dt_obj.year + 3)

            system_prompt = system_prompt_template.format(
                current_date=current_date_str,
                future_start_date=future_start_date_str,
                future_start_date_year=future_start_date_year_str,
                future_end_date_year=future_end_date_year_str
            )
            
            logger.info(f"OpenAI –∑–∞–ø—Ä–æ—Å –¥–ª—è {user_id_for_error}: system_prompt (–Ω–∞—á–∞–ª–æ): {system_prompt[:100]}...")
            logger.info(f"OpenAI –∑–∞–ø—Ä–æ—Å –¥–ª—è {user_id_for_error}: user_prompt: {user_prompt_content[:100]}...")

            response = await client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt_content}
                ],
                temperature=0.75,
                max_tokens=max_tokens,
            )
            return response.choices[0].message.content.strip()
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..." –≤–æ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
            await context.bot.send_chat_action(chat_id=user_id_for_error, action=ChatAction.TYPING)
            return await retry_operation(gpt_call)
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ OpenAI –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_for_error}: {e}"
            logger.error(error_msg, exc_info=True)
            await send_admin_notification(context, error_msg, critical=True) 
            return None

async def send_long_message(chat_id: int, message: str, bot_instance):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —á–∞—Å—Ç—è–º."""
    parts = [message[i:i + CONFIG["MAX_MESSAGE_LENGTH"]] for i in range(0, len(message), CONFIG["MAX_MESSAGE_LENGTH"])]
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é {len(parts)} —á–∞—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    
    for i, part in enumerate(parts):
        if not part.strip():
            continue
        async def send_part_op():
            await bot_instance.send_message(chat_id=chat_id, text=part) 
            if i < len(parts) - 1:
                 await asyncio.sleep(1.5) 
        
        try:
            await retry_operation(send_part_op)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            if i == 0: # –ï—Å–ª–∏ –¥–∞–∂–µ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –Ω–µ —É—à–ª–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ–±—â–µ–π –ø—Ä–æ–±–ª–µ–º–µ
                await bot_instance.send_message(chat_id=chat_id, text=clean_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ß–∞—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @zamira_esoteric."))
            raise # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ

async def send_admin_notification(context: ContextTypes.DEFAULT_TYPE, message: str, critical: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    full_message = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ë–æ—Ç–∞ –ó–∞–º–∏—Ä—ã ({'–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê üÜò' if critical else '–ò–Ω—Ñ–æ'}) üîî\n{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n{message}"
    for admin_id in CONFIG["ADMIN_IDS"]:
        try:
            await context.bot.send_message(chat_id=admin_id, text=full_message)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
# --- Callbacks –¥–ª—è JobQueue ---
async def main_service_job(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data 
    user_id: int = job_data["user_id"] # type: ignore
    result: str = job_data["result"] # type: ignore
    service_type: str = job_data["service_type"] # type: ignore
    user_name_for_log = job_data.get("user_name_for_log", str(user_id)) # type: ignore

    service_type_rus_map = {"tarot": "—Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", "matrix": "—Ä–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã"}
    service_type_rus = service_type_rus_map.get(service_type, "—É—Å–ª—É–≥—É")

    logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É ({service_type_rus}) –¥–ª—è {user_name_for_log} ({user_id})")
    try:
        cleaned_result = clean_text(result) 
        await send_long_message(user_id, cleaned_result, context.bot)
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëç –î–∞, –¥–æ–≤–æ–ª–µ–Ω(–ª—å–Ω–∞)", callback_data=f"satisfaction_yes_{service_type}")],
            [InlineKeyboardButton("üëé –ù–µ—Ç, –Ω–µ —Å–æ–≤—Å–µ–º", callback_data=f"satisfaction_no_{service_type}")],
        ])
        await context.bot.send_message(user_id, clean_text(SATISFACTION_PROMPT_TEXT.format(service_type_rus=service_type_rus)), reply_markup=keyboard)
        
        completed_users.add(user_id)
        save_completed_users(completed_users)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name_for_log} ({user_id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª {service_type_rus} –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ completed_users.")
        await send_admin_notification(context, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name_for_log} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª {service_type_rus}.")

    except Exception as e:
        error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main_service_job –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name_for_log} ({user_id}): {e}"
        logger.error(error_message, exc_info=True)
        await send_admin_notification(context, error_message, critical=True)
        try:
            await context.bot.send_message(user_id, clean_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @zamira_esoteric –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."))
        except Exception as e_nested:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ main_service_job –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e_nested}")

async def review_request_job(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data 
    user_id: int = job_data["user_id"] # type: ignore
    service_type: str = job_data["service_type"] # type: ignore
    service_type_rus_map = {"tarot": "—Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", "matrix": "—Ä–∞–∑–±–æ—Ä –ú–∞—Ç—Ä–∏—Ü—ã –°—É–¥—å–±—ã"}
    service_type_rus = service_type_rus_map.get(service_type, "—É—Å–ª—É–≥—É")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è {service_type_rus}")
    try:
        await context.bot.send_message(user_id, clean_text(REVIEW_TEXT_DELAYED.format(service_type_rus=service_type_rus)))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

# --- ConversationHandler —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
(CHOOSE_SERVICE, 
 ASK_MATRIX_NAME, ASK_MATRIX_DOB, CONFIRM_MATRIX_DATA,                 # 0, 1, 2, 3
 ASK_TAROT_MAIN_PERSON_NAME, ASK_TAROT_MAIN_PERSON_DOB,              # 4, 5
 ASK_TAROT_BACKSTORY, ASK_TAROT_OTHER_PEOPLE, ASK_TAROT_QUESTIONS,    # 6, 7, 8
 SHOW_TAROT_CONFIRM_OPTIONS, # 9 - –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¢–∞—Ä–æ –∏ –∫–Ω–æ–ø–æ–∫ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
 HANDLE_FAQ_CHOICE # 10 - –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–º –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –µ—Å–ª–∏ FAQ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
 ) = range(11) # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º 11 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, HANDLE_FAQ_CHOICE –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ ConvHandler

CANCEL_CALLBACK_DATA = "cancel_conv_inline" 
EDIT_PREFIX_TAROT = "edit_field_tarot_" 

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_cancel_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=CANCEL_CALLBACK_DATA)]])

def get_tarot_edit_keyboard() -> InlineKeyboardMarkup: 
    buttons = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–º—è –æ—Å–Ω–æ–≤–Ω–æ–µ", callback_data=f"{EDIT_PREFIX_TAROT}main_person_name")],
        [InlineKeyboardButton("‚úèÔ∏è –î–∞—Ç—É —Ä–æ–∂–¥. –æ—Å–Ω–æ–≤–Ω—É—é", callback_data=f"{EDIT_PREFIX_TAROT}main_person_dob")],
        [InlineKeyboardButton("‚úèÔ∏è –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é", callback_data=f"{EDIT_PREFIX_TAROT}backstory")],
        [InlineKeyboardButton("‚úèÔ∏è –î—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"{EDIT_PREFIX_TAROT}other_people")],
        [InlineKeyboardButton("‚úèÔ∏è –í–æ–ø—Ä–æ—Å—ã –∫ –∫–∞—Ä—Ç–∞–º", callback_data=f"{EDIT_PREFIX_TAROT}questions")],
        [InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="confirm_final_tarot")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—ë –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=CANCEL_CALLBACK_DATA)]
    ]
    return InlineKeyboardMarkup(buttons)
# --- –§—É–Ω–∫—Ü–∏–∏ ConversationHandler ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if not user: 
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ start_command")
        return ConversationHandler.END
    
    if user.id in completed_users:
        await update.message.reply_text(clean_text(PRIVATE_MESSAGE))
        return ConversationHandler.END

    if context.user_data: 
        context.user_data.clear() 
        
    keyboard = [
        [InlineKeyboardButton("üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", callback_data="tarot")],
        [InlineKeyboardButton("üåü –ú–∞—Ç—Ä–∏—Ü–∞ –°—É–¥—å–±—ã", callback_data="matrix")],
        [InlineKeyboardButton("üì© –°–≤—è–∑—å —Å–æ –º–Ω–æ–π", callback_data="contact_direct")],
    ]
    await update.message.reply_text(clean_text(WELCOME_TEXT), reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_SERVICE

async def choose_service_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_data = context.user_data 
    if user_data is None: 
        user_data = context.user_data = {}

    service_type = query.data
    
    if service_type == "contact_direct":
        await query.edit_message_text(clean_text(CONTACT_TEXT), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_start")]]))
        return CHOOSE_SERVICE 
    elif service_type == "back_to_start":
        keyboard_main = [
            [InlineKeyboardButton("üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", callback_data="tarot")],
            [InlineKeyboardButton("üåü –ú–∞—Ç—Ä–∏—Ü–∞ –°—É–¥—å–±—ã", callback_data="matrix")],
            [InlineKeyboardButton("üì© –°–≤—è–∑—å —Å–æ –º–Ω–æ–π", callback_data="contact_direct")],
        ]
        await query.edit_message_text(clean_text(WELCOME_TEXT), reply_markup=InlineKeyboardMarkup(keyboard_main))
        return CHOOSE_SERVICE
    
    user_data["service_type"] = service_type # type: ignore
    user_data["current_step"] = 1 # type: ignore For progress bar
    
    if service_type == "tarot":
        user_data["total_steps"] = 5 # type: ignore For Tarot
        await query.edit_message_text(text=clean_text(TAROT_INTRO_TEXT))
        prompt_text = ASK_TAROT_MAIN_PERSON_NAME_TEXT # Already includes (–®–∞–≥ X –∏–∑ Y)
        await query.message.reply_text(clean_text(prompt_text), reply_markup=get_cancel_keyboard())
        return ASK_TAROT_MAIN_PERSON_NAME
    elif service_type == "matrix":
        user_data["total_steps"] = 2 # type: ignore For Matrix
        await query.edit_message_text(text=clean_text(MATRIX_INTRO_TEXT))
        prompt_text = ASK_MATRIX_NAME_TEXT # Already includes (–®–∞–≥ X –∏–∑ Y)
        await query.message.reply_text(clean_text(prompt_text), reply_markup=get_cancel_keyboard())
        return ASK_MATRIX_NAME
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π service_type –≤ choose_service_callback: {service_type}")
        return CHOOSE_SERVICE 

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ú–∞—Ç—Ä–∏—Ü—ã ---
async def ask_matrix_name_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data # type: ignore
    name_input = update.message.text
    if not name_input or not is_valid_name(name_input):
        error_msg = f"–•–º, ¬´{name_input}¬ª –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è. –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã, –∏ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
        await update.message.reply_text(clean_text(error_msg), reply_markup=get_cancel_keyboard())
        return ASK_MATRIX_NAME
    user_data["matrix_name"] = clean_text(name_input.strip())
    user_data["current_step"] = 2 # type: ignore
    
    reply_variants = [
        ASK_MATRIX_DOB_TEXT, # –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç (–®–∞–≥ 2 –∏–∑ 2)
        f"(–®–∞–≥ 2 –∏–∑ 2) –û—Ç–ª–∏—á–Ω–æ, {user_data['matrix_name']}! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì).",
        f"(–®–∞–≥ 2 –∏–∑ 2) –ó–∞–ø–∏—Å–∞–ª–∞, {user_data['matrix_name']}. –î–∞–ª–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
    ]
    await update.message.reply_text(clean_text(get_random_variant(reply_variants)), reply_markup=get_cancel_keyboard())
    return ASK_MATRIX_DOB

async def ask_matrix_dob_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data # type: ignore
    dob_text_input = update.message.text
    if not dob_text_input:
        await update.message.reply_text("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_cancel_keyboard())
        return ASK_MATRIX_DOB

    dob_text = dob_text_input.strip()
    if not validate_date_format(dob_text):
        await update.message.reply_text(f"–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ¬´{dob_text}¬ª –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990).", reply_markup=get_cancel_keyboard())
        return ASK_MATRIX_DOB
    if not validate_date_semantic(dob_text):
        await update.message.reply_text(f"–î–∞—Ç–∞ ¬´{dob_text}¬ª –∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_cancel_keyboard())
        return ASK_MATRIX_DOB
        
    user_data["matrix_dob"] = clean_text(dob_text)
    confirm_text = CONFIRM_DETAILS_MATRIX_TEXT.format(name=user_data["matrix_name"], dob=user_data["matrix_dob"])
    keyboard = [[InlineKeyboardButton("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data="confirm_final_matrix")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=CANCEL_CALLBACK_DATA)]]
    await update.message.reply_text(confirm_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM_MATRIX_DATA

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¢–∞—Ä–æ ---
async def ask_tarot_main_person_name_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data # type: ignore
    name_input = update.message.text
    if not name_input or not is_valid_name(name_input):
        error_msg = f"–•–º, ¬´{name_input}¬ª –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è. –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        await update.message.reply_text(clean_text(error_msg), reply_markup=get_cancel_keyboard())
        return ASK_TAROT_MAIN_PERSON_NAME
        
    user_data["tarot_main_person_name"] = clean_text(name_input.strip())
    user_data["current_step"] = 2 # type: ignore
    
    # –ï—Å–ª–∏ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —ç—Ç–æ –ø–æ–ª–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if user_data.pop("editing_field_target_state", None): # type: ignore
        return await show_tarot_confirm_options_message(update, context)

    prompt_text = ASK_TAROT_MAIN_PERSON_DOB_TEXT.format(name=user_data["tarot_main_person_name"])
    await update.message.reply_text(clean_text(prompt_text), reply_markup=get_cancel_keyboard())
    return ASK_TAROT_MAIN_PERSON_DOB

async def ask_tarot_main_person_dob_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data # type: ignore
    dob_text_input = update.message.text
    if not dob_text_input:
        await update.message.reply_text("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_MAIN_PERSON_DOB
    
    dob_text = dob_text_input.strip()
    if not validate_date_format(dob_text):
        await update.message.reply_text(f"–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ¬´{dob_text}¬ª –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_MAIN_PERSON_DOB
    if not validate_date_semantic(dob_text):
        await update.message.reply_text(f"–î–∞—Ç–∞ ¬´{dob_text}¬ª –∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ–¥ –∏ —Ñ–æ—Ä–º–∞—Ç.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_MAIN_PERSON_DOB
        
    user_data["tarot_main_person_dob"] = clean_text(dob_text)
    user_data["current_step"] = 3 # type: ignore

    if user_data.pop("editing_field_target_state", None): # type: ignore
        return await show_tarot_confirm_options_message(update, context)

    await update.message.reply_text(clean_text(ASK_TAROT_BACKSTORY_TEXT), reply_markup=get_cancel_keyboard())
    return ASK_TAROT_BACKSTORY

async def ask_tarot_backstory_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data # type: ignore
    backstory_input = update.message.text
    min_len = CONFIG.get("MIN_TEXT_LENGTH_TAROT_BACKSTORY", 30)
    if not backstory_input or len(backstory_input.strip()) < min_len:
        await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–Ω–µ –º–µ–Ω–µ–µ {min_len} —Å–∏–º–≤–æ–ª–æ–≤). –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å–∫–ª–∞–¥–∞.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_BACKSTORY
        
    user_data["tarot_backstory"] = clean_text(backstory_input.strip())
    user_data["current_step"] = 4 # type: ignore

    if user_data.pop("editing_field_target_state", None): # type: ignore
        return await show_tarot_confirm_options_message(update, context)

    await update.message.reply_text(clean_text(ASK_TAROT_OTHER_PEOPLE_TEXT), reply_markup=get_cancel_keyboard())
    return ASK_TAROT_OTHER_PEOPLE

async def ask_tarot_other_people_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data # type: ignore
    other_people_input = update.message.text
    if not other_people_input or len(other_people_input.strip()) < 2: 
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_OTHER_PEOPLE
        
    user_data["tarot_other_people"] = clean_text(other_people_input.strip())
    user_data["current_step"] = 5 # type: ignore

    if user_data.pop("editing_field_target_state", None): # type: ignore
        return await show_tarot_confirm_options_message(update, context)

    await update.message.reply_text(clean_text(ASK_TAROT_QUESTIONS_TEXT), reply_markup=get_cancel_keyboard())
    return ASK_TAROT_QUESTIONS

async def ask_tarot_questions_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data # type: ignore
    questions_input = update.message.text
    min_len = CONFIG.get("MIN_TEXT_LENGTH_TAROT_QUESTION", 10)
    if not questions_input or len(questions_input.strip()) < min_len:
        await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å(—ã) –∫ –∫–∞—Ä—Ç–∞–º (–Ω–µ –º–µ–Ω–µ–µ {min_len} —Å–∏–º–≤–æ–ª–æ–≤). –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", reply_markup=get_cancel_keyboard())
        return ASK_TAROT_QUESTIONS
        
    user_data["tarot_questions"] = clean_text(questions_input.strip())

    # –ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¢–∞—Ä–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return await show_tarot_confirm_options_message(update, context)


async def show_tarot_confirm_options_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data = context.user_data
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ª–∏–±–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –ª–∏–±–æ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è
    # `update` –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ Message (–µ—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç ask_..._message), —Ç–∞–∫ –∏ CallbackQuery (–µ—Å–ª–∏ –æ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –¥–∞–Ω–Ω—ã–º")

    effective_message = update.effective_message # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –∏–ª–∏ –∫–æ—Ç–æ—Ä–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if not effective_message: # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        logger.warning("show_tarot_confirm_options_message: effective_message is None")
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –µ—Å—Ç—å
        if update.effective_chat:
            effective_message = await context.bot.send_message(update.effective_chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        else: # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
            return ConversationHandler.END


    if not user_data or user_data.get("service_type") != "tarot": # type: ignore
        await effective_message.reply_text(clean_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¢–∞—Ä–æ. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞."), reply_markup=get_cancel_keyboard())
        return await start_command(update, context) # type: ignore

    confirm_text_display = CONFIRM_DETAILS_TAROT_TEXT_DISPLAY.format(
        main_person_name=user_data.get("tarot_main_person_name", "-"),
        main_person_dob=user_data.get("tarot_main_person_dob", "-"),
        backstory=user_data.get("tarot_backstory", "-"),
        other_people=user_data.get("tarot_other_people", "-"),
        questions=user_data.get("tarot_questions", "-")
    )
    
    keyboard = get_tarot_edit_keyboard()
    
    # –ï—Å–ª–∏ –º—ã –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.
    # –ü–æ—ç—Ç–æ–º—É –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    # –ï—Å–ª–∏ –º—ã –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ –≤–ø–µ—Ä–≤—ã–µ (–ø–æ—Å–ª–µ ask_tarot_questions_message), —Ç–æ update.message —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    # –ú—ã –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ.
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
    # (–≠—Ç–æ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –≤ edit_field_tarot_callback –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º)

    await effective_message.reply_text(clean_text(confirm_text_display)) # –°–Ω–∞—á–∞–ª–∞ –¥–∞–Ω–Ω—ã–µ
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    msg_with_buttons = await effective_message.reply_text(clean_text(EDIT_CHOICE_TEXT), reply_markup=keyboard) 
    if user_data and msg_with_buttons: # type: ignore
        user_data["tarot_confirm_options_message_id"] = msg_with_buttons.message_id # type: ignore
        
    return SHOW_TAROT_CONFIRM_OPTIONS

async def edit_field_tarot_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_data = context.user_data
    if not user_data: return ConversationHandler.END # type: ignore

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        if query.message:
            await query.delete_message()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ({query.message.message_id if query.message else 'unknown'}): {e}")

    field_to_edit_key = query.data # e.g., "edit_field_tarot_main_person_name"
    user_data["editing_tarot_field_key"] = field_to_edit_key # type: ignore –°–æ—Ö—Ä–∞–Ω—è–µ–º, –ß–¢–û –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–Ω–æ–≤–æ
    # –ö–ª—é—á –≤ user_data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —á–∞—Å—Ç–∏ callback_data –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    field_name_in_user_data = field_to_edit_key.replace(EDIT_PREFIX_TAROT, "tarot_")
    user_data.pop(field_name_in_user_data, None) # type: ignore

    next_state_map = {
        f"{EDIT_PREFIX_TAROT}main_person_name": (ASK_TAROT_MAIN_PERSON_NAME, ASK_TAROT_MAIN_PERSON_NAME_TEXT),
        f"{EDIT_PREFIX_TAROT}main_person_dob": (ASK_TAROT_MAIN_PERSON_DOB, ASK_TAROT_MAIN_PERSON_DOB_TEXT.format(name=user_data.get("tarot_main_person_name", "–¥–ª—è –Ω–µ–≥–æ/–Ω–µ–µ"))), # type: ignore
        f"{EDIT_PREFIX_TAROT}backstory": (ASK_TAROT_BACKSTORY, ASK_TAROT_BACKSTORY_TEXT),
        f"{EDIT_PREFIX_TAROT}other_people": (ASK_TAROT_OTHER_PEOPLE, ASK_TAROT_OTHER_PEOPLE_TEXT),
        f"{EDIT_PREFIX_TAROT}questions": (ASK_TAROT_QUESTIONS, ASK_TAROT_QUESTIONS_TEXT),
    }

    if field_to_edit_key in next_state_map:
        next_state, prompt_text = next_state_map[field_to_edit_key]
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
        await query.message.reply_text(clean_text(prompt_text), reply_markup=get_cancel_keyboard())
        return next_state
    
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¢–∞—Ä–æ: {field_to_edit_key}")
    return await show_tarot_confirm_options_message(update, context) # type: ignore


# --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤—ã–∑–æ–≤–∞ OpenAI ---
async def process_final_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, service_type: str) -> int:
    query = update.callback_query
    await query.answer()
    user_data = context.user_data # type: ignore
    user_id = query.from_user.id
    user_name_for_log = query.from_user.full_name or str(user_id)
    user_data["user_name_for_log"] = user_name_for_log # type: ignore –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è main_service_job

    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞"
        response_wait_text = get_random_variant(RESPONSE_WAIT_VARIANTS)
        sent_message = await query.edit_message_text(text=clean_text(response_wait_text), reply_markup=None)
        if sent_message: # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
            try:
                await context.bot.set_message_reaction(
                    chat_id=sent_message.chat_id, 
                    message_id=sent_message.message_id, 
                    reaction=[ReactionTypeEmoji("‚ö°")]
                )
            except Exception as e_react:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id}: {e_react}")
    except TelegramError as e:
        if "Message is not modified" not in str(e) and "message to edit not found" not in str(e).lower(): 
            logger.error(f"–û—à–∏–±–∫–∞ edit_message_text –≤ process_final_confirmation: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            response_wait_text = get_random_variant(RESPONSE_WAIT_VARIANTS)
            new_msg = await query.message.reply_text(text=clean_text(response_wait_text))
            if new_msg:
                 try: await context.bot.set_message_reaction(chat_id=new_msg.chat_id, message_id=new_msg.message_id, reaction=[ReactionTypeEmoji("‚ö°")])
                 except Exception as e_r: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e_r}")

             
    input_for_gpt = ""
    system_prompt_template = ""
    user_prompt_template_str = ""
    max_tokens_val = 0
    confirm_text_on_error = "" 
    next_confirm_state_on_error = ConversationHandler.END 

    if service_type == "tarot":
        input_for_gpt = (
            f"–û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è: {user_data.get('tarot_main_person_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data.get('tarot_main_person_dob', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏: {user_data.get('tarot_backstory', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–î—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {user_data.get('tarot_other_people', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í–æ–ø—Ä–æ—Å—ã –∫ –∫–∞—Ä—Ç–∞–º: {user_data.get('tarot_questions', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )
        system_prompt_template = PROMPT_TAROT_SYSTEM
        user_prompt_template_str = PROMPT_TAROT_USER
        max_tokens_val = CONFIG["OPENAI_MAX_TOKENS_TAROT"]
        confirm_text_on_error = CONFIRM_DETAILS_TAROT_TEXT_DISPLAY.format( # –ò—Å–ø–æ–ª—å–∑—É–µ–º DISPLAY –≤–µ—Ä—Å–∏—é
            main_person_name=user_data.get('tarot_main_person_name', '?'),
            main_person_dob=user_data.get('tarot_main_person_dob', '?'),
            backstory=user_data.get('tarot_backstory', '?'),
            other_people=user_data.get('tarot_other_people', '?'),
            questions=user_data.get('tarot_questions', '?')
        )
        next_confirm_state_on_error = SHOW_TAROT_CONFIRM_OPTIONS # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    elif service_type == "matrix":
        input_for_gpt = (
            f"–ò–º—è: {user_data.get('matrix_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data.get('matrix_dob', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )
        system_prompt_template = PROMPT_MATRIX_SYSTEM
        user_prompt_template_str = PROMPT_MATRIX_USER
        max_tokens_val = CONFIG["OPENAI_MAX_TOKENS_MATRIX"]
        confirm_text_on_error = CONFIRM_DETAILS_MATRIX_TEXT.format(
            name=user_data.get('matrix_name', '?'),
            dob=user_data.get('matrix_dob', '?')
        )
        next_confirm_state_on_error = CONFIRM_MATRIX_DATA

    result = await ask_gpt(system_prompt_template, final_user_prompt, max_tokens_val, context, user_id)

    if result is None: # –û—à–∏–±–∫–∞ OpenAI
        await query.message.reply_text(clean_text(OPENAI_ERROR_MESSAGE)) 
        
        keyboard_retry_confirm_text = confirm_text_on_error
        keyboard_retry_callback = f"confirm_final_{service_type}"

        keyboard_retry = [[InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=keyboard_retry_callback)],
                          [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=CANCEL_CALLBACK_DATA)]] 
        try: 
            await query.message.reply_text(text=clean_text(keyboard_retry_confirm_text), reply_markup=InlineKeyboardMarkup(keyboard_retry))
        except Exception as e_reply:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ OpenAI: {e_reply}")
        
        return next_confirm_state_on_error

    if not context.job_queue:
        logger.error("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        await query.message.reply_text("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @zamira_esoteric.")
        await send_admin_notification(context, "JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É!", critical=True)
        if user_data: user_data.clear() 
        return ConversationHandler.END
    
    job_payload = {"user_id": user_id, "result": result, "service_type": service_type, "user_name_for_log": user_name_for_log}
    context.job_queue.run_once(main_service_job, CONFIG["DELAY_SECONDS_MAIN_SERVICE"], data=job_payload, name=f"main_job_{user_id}") # type: ignore
    
    logger.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name_for_log} ({user_id}) ({service_type}) –ø—Ä–∏–Ω—è—Ç–∞ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
    await send_admin_notification(context, f"üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {user_name_for_log} (ID: {user_id}) –Ω–∞ {service_type}. –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
    if user_data: user_data.clear() 
    return ConversationHandler.END

async def confirm_matrix_data_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await process_final_confirmation(update, context, "matrix")

async def confirm_tarot_data_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ SHOW_TAROT_CONFIRM_OPTIONS
    return await process_final_confirmation(update, context, "tarot")

# --- –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã ---
async def common_cancel_logic(update: Update, context: ContextTypes.DEFAULT_TYPE, query: Optional[CallbackQuery] = None) -> int:
    user_data = context.user_data
    if user_data:
        user_data.clear()
    
    cancel_message_text = clean_text(CANCEL_TEXT)
    
    chat_to_reply = None
    message_to_edit_id = None

    if query: 
        chat_to_reply = query.message.chat
        message_to_edit_id = query.message.message_id
        try:
            await query.edit_message_text(text=cancel_message_text, reply_markup=None)
        except TelegramError as e:
            if "Message is not modified" not in str(e) and "message to edit not found" not in str(e).lower(): 
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ({message_to_edit_id}) –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {e}")
                await query.message.reply_text(text=cancel_message_text) 
            elif "message to edit not found" in str(e).lower():
                 await query.message.reply_text(text=cancel_message_text)
    elif update.message: 
        await update.message.reply_text(text=cancel_message_text)
        chat_to_reply = update.message.chat

    if chat_to_reply: 
        keyboard_main = [
            [InlineKeyboardButton("üÉè –†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ", callback_data="tarot")],
            [InlineKeyboardButton("üåü –ú–∞—Ç—Ä–∏—Ü–∞ –°—É–¥—å–±—ã", callback_data="matrix")],
            [InlineKeyboardButton("üì© –°–≤—è–∑—å —Å–æ –º–Ω–æ–π", callback_data="contact_direct")],
        ]
        try:
            await context.bot.send_message(chat_id=chat_to_reply.id, text=clean_text(WELCOME_TEXT), reply_markup=InlineKeyboardMarkup(keyboard_main))
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å WELCOME_TEXT –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: {e}")
    
    return ConversationHandler.END


async def cancel_conv_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id if update.effective_user else "Unknown"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
    return await common_cancel_logic(update, context)

async def cancel_conv_inline_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer() 
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É.")
    return await common_cancel_logic(update, context, query=query)
