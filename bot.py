import os
import re
import logging
import asyncio
import openai
from datetime import datetime
from typing import Dict
from logging.handlers import RotatingFileHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        RotatingFileHandler("bot.log", maxBytes=5*1024*1024, backupCount=3),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "DELAY_SECONDS": int(os.getenv("DELAY_SECONDS", 7200)),  # 2 —á–∞—Å–∞
    "MAX_MESSAGE_LENGTH": 3900,
    "OPENAI_MAX_TOKENS": 6000,
    "OPENAI_MAX_CONCURRENT": 5,
    "MIN_TEXT_LENGTH_TAROT": 100,
    "MIN_TEXT_LENGTH_MATRIX": 15,
    "RETRY_DELAY": 5,
    "MAX_RETRIES": 3,
}

# API –∫–ª—é—á–∏
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not BOT_TOKEN or not openai.api_key:
    logger.critical("–¢–æ–∫–µ–Ω—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    raise ValueError("–¢–æ–∫–µ–Ω—ã TELEGRAM_TOKEN –∏ OPENAI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã.")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
user_data: Dict[int, dict] = {}
completed_users: set = set()
semaphore = asyncio.Semaphore(CONFIG["OPENAI_MAX_CONCURRENT"])

# –ü—Ä–æ–º–ø—Ç—ã
PROMPT_TAROT = """
–¢—ã ‚Äî –ó–∞–º–∏—Ä–∞, 42 –≥–æ–¥–∞. –ñ–µ–Ω—â–∏–Ω–∞ —Å –¥–∞—Ä–æ–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥... [—Å–æ–∫—Ä–∞—â–µ–Ω–æ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ] ...
–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:
{input_text}
"""

PROMPT_MATRIX = """
–¢—ã ‚Äî –ó–∞–º–∏—Ä–∞, 42 –≥–æ–¥–∞. –≠–∑–æ—Ç–µ—Ä–∏–∫, —è—Å–Ω–æ–≤–∏–¥—è—â–∞—è –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã... [—Å–æ–∫—Ä–∞—â–µ–Ω–æ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ] ...
–î–ê–ù–ù–´–ï –ö–õ–ò–ï–ù–¢–ê:
{input_text}
"""

# –¢–µ–∫—Å—Ç—ã
WELCOME_TEXT = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–ü–µ—Ä–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¢–∞—Ä–æ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ..."
INSTRUCTION_TAROT = "–ß—Ç–æ–±—ã —è —Å–¥–µ–ª–∞–ª–∞ —Ä–∞—Å–∫–ª–∞–¥, –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n‚Äî –í–∞—à–µ –∏–º—è –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è..."
INSTRUCTION_MATRIX = "–ß—Ç–æ–±—ã —è —Å–º–æ–≥–ª–∞ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –≤–∞—Å —Ä–∞–∑–±–æ—Ä –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å—É–¥—å–±—ã, –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n‚Äî –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è..."
RESPONSE_WAIT = "–°–ø–∞—Å–∏–±–æ, —è –≤—Å–µ –ø–æ–ª—É—á–∏–ª–∞! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—à–ª–∞ –∫–æ –º–Ω–µ..."
REVIEW_TEXT = "–ï—Å–ª–∏ –≤–∞—Å —É—Å—Ç—Ä–æ–∏–ª —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ —Ä–∞–∑–±–æ—Ä –ø–æ –º–∞—Ç—Ä–∏—Ü–µ, –¥–ª—è —ç–Ω–µ—Ä–≥–æ–æ–±–º–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –ê–≤–∏—Ç–æ..."
PRIVATE_MESSAGE = "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —É—Å–ª—É–≥—É! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É: @zamira_esoteric."
CONTACT_TEXT = "@zamira_esoteric"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def clean_text(text: str) -> str:
    return "".join(c for c in text if c.isprintable() or c in "\n\r\t ")

def validate_date(date_text: str) -> bool:
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", date_text):
        return False
    try:
        date = datetime.strptime(date_text, "%d.%m.%Y")
        return 1900 <= date.year <= datetime.now().year
    except ValueError:
        return False

async def retry_operation(coro, max_retries=CONFIG["MAX_RETRIES"], delay=CONFIG["RETRY_DELAY"]):
    for attempt in range(max_retries):
        try:
            return await coro
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
            if attempt == max_retries - 1:
                raise
            await asyncio.sleep(delay * (2 ** attempt))

def get_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–†–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ üÉè", callback_data="tarot")],
        [InlineKeyboardButton("–ú–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã üåü", callback_data="matrix")],
        [InlineKeyboardButton("–°–≤—è–∑—å —Å–æ –º–Ω–æ–π üì©", callback_data="contact")]
    ])

def get_confirm_keyboard(tarot=False):
    return InlineKeyboardMarkup([[InlineKeyboardButton(
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é" if tarot else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"
    )]])

async def ask_gpt(prompt: str) -> str:
    async with semaphore:
        async def gpt_call():
            response = await openai.ChatCompletion.acreate(
                model="gpt-4o",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.85,
                max_tokens=CONFIG["OPENAI_MAX_TOKENS"]
            )
            return response.choices[0].message.content.strip()
        return await retry_operation(gpt_call())

async def send_long_message(chat_id: int, message: str, bot):
    parts = [message[i:i + CONFIG["MAX_MESSAGE_LENGTH"]] for i in range(0, len(message), CONFIG["MAX_MESSAGE_LENGTH"])]
    for part in parts:
        if not part.strip():
            continue
        await retry_operation(lambda: bot.send_message(chat_id=chat_id, text=part))
        await asyncio.sleep(1)

async def delayed_response_job(context: ContextTypes.DEFAULT_TYPE):
    chat_id, result, bot = context.job.data
    try:
        await send_long_message(chat_id, clean_text(result), bot)
        await bot.send_message(chat_id=chat_id, text=clean_text(REVIEW_TEXT))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @zamira_esoteric.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in completed_users:
        await update.message.reply_text(clean_text(PRIVATE_MESSAGE))
        return
    user_data[user_id] = {"type": None, "text": ""}
    await update.message.reply_text(clean_text(WELCOME_TEXT), reply_markup=get_main_keyboard())

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id in completed_users and query.data in ["tarot", "matrix"]:
        await query.message.reply_text(clean_text(PRIVATE_MESSAGE))
        return

    try:
        if query.data == "tarot":
            user_data[user_id] = {"type": "tarot", "text": ""}
            await query.message.reply_text(clean_text(INSTRUCTION_TAROT), reply_markup=get_confirm_keyboard(tarot=True))
        elif query.data == "matrix":
            user_data[user_id] = {"type": "matrix", "text": ""}
            await query.message.reply_text(clean_text(INSTRUCTION_MATRIX), reply_markup=get_confirm_keyboard())
        elif query.data == "contact":
            await query.message.reply_text(clean_text(CONTACT_TEXT))
        elif query.data == "confirm":
            data = user_data.get(user_id, {})
            if not data.get("type") or not data.get("text", "").strip():
                await query.message.reply_text(clean_text("–í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏."))
                return
            if len(data["text"]) < CONFIG["MIN_TEXT_LENGTH_TAROT"] and data["type"] == "tarot":
                await query.message.reply_text("–¢–µ–∫—Å—Ç –¥–ª—è –¢–∞—Ä–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
                return
            if len(data["text"]) < CONFIG["MIN_TEXT_LENGTH_MATRIX"] and data["type"] == "matrix":
                await query.message.reply_text("–¢–µ–∫—Å—Ç –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
                return
            date_match = re.search(r"\b\d{2}\.\d{2}\.\d{4}\b", data["text"])
            if not date_match or not validate_date(date_match.group()):
                await query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
                return

            await query.message.reply_text(clean_text(RESPONSE_WAIT))
            prompt = PROMPT_TAROT.format(input_text=data["text"]) if data["type"] == "tarot" else PROMPT_MATRIX.format(input_text=data["text"])
            result = await ask_gpt(prompt)
            context.job_queue.run_once(delayed_response_job, CONFIG["DELAY_SECONDS"], data=(query.message.chat.id, result, context.bot))
            completed_users.add(user_id)
            del user_data[user_id]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @zamira_esoteric.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.text:
        user_id = update.message.from_user.id
        if user_id in completed_users:
            await update.message.reply_text(clean_text(PRIVATE_MESSAGE))
            return
        if user_id in user_data:
            user_data[user_id]["text"] += "\n" + clean_text(update.message.text)

async def ignore_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        app = ApplicationBuilder().token(BOT_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(handle_callback))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(MessageHandler(~filters.TEXT & ~filters.COMMAND, ignore_media))
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        app.run_polling()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise